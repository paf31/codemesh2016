// Generated by psc-bundle 0.10.1
var PS = {};
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var Semigroupoid = function (compose) {
      this.compose = compose;
  };
  var semigroupoidFn = new Semigroupoid(function (f) {
      return function (g) {
          return function (x) {
              return f(g(x));
          };
      };
  });
  var compose = function (dict) {
      return dict.compose;
  };
  exports["Semigroupoid"] = Semigroupoid;
  exports["compose"] = compose;
  exports["semigroupoidFn"] = semigroupoidFn;
})(PS["Control.Semigroupoid"] = PS["Control.Semigroupoid"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var Control_Semigroupoid = PS["Control.Semigroupoid"];        
  var Category = function (__superclass_Control$dotSemigroupoid$dotSemigroupoid_0, id) {
      this["__superclass_Control.Semigroupoid.Semigroupoid_0"] = __superclass_Control$dotSemigroupoid$dotSemigroupoid_0;
      this.id = id;
  };
  var id = function (dict) {
      return dict.id;
  };
  var categoryFn = new Category(function () {
      return Control_Semigroupoid.semigroupoidFn;
  }, function (x) {
      return x;
  });
  exports["Category"] = Category;
  exports["id"] = id;
  exports["categoryFn"] = categoryFn;
})(PS["Control.Category"] = PS["Control.Category"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var Control_Category = PS["Control.Category"];
  var flip = function (f) {
      return function (b) {
          return function (a) {
              return f(a)(b);
          };
      };
  };
  var $$const = function (a) {
      return function (v) {
          return a;
      };
  };
  exports["const"] = $$const;
  exports["flip"] = flip;
})(PS["Data.Function"] = PS["Data.Function"] || {});
(function(exports) {
    "use strict";

  exports.unit = {};
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function(exports) {
    "use strict";

  exports.showIntImpl = function (n) {
    return n.toString();
  };
})(PS["Data.Show"] = PS["Data.Show"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var $foreign = PS["Data.Show"];     
  var Show = function (show) {
      this.show = show;
  };                                                 
  var showInt = new Show($foreign.showIntImpl);
  var show = function (dict) {
      return dict.show;
  };
  exports["Show"] = Show;
  exports["show"] = show;
  exports["showInt"] = showInt;
})(PS["Data.Show"] = PS["Data.Show"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var $foreign = PS["Data.Unit"];
  var Data_Show = PS["Data.Show"];
  exports["unit"] = $foreign.unit;
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var $foreign = PS["Data.Functor"];
  var Data_Function = PS["Data.Function"];
  var Data_Unit = PS["Data.Unit"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];        
  var Functor = function (map) {
      this.map = map;
  };
  var map = function (dict) {
      return dict.map;
  };
  var $$void = function (dictFunctor) {
      return map(dictFunctor)(Data_Function["const"](Data_Unit.unit));
  };
  var voidRight = function (dictFunctor) {
      return function (x) {
          return map(dictFunctor)(Data_Function["const"](x));
      };
  };
  var functorFn = new Functor(Control_Semigroupoid.compose(Control_Semigroupoid.semigroupoidFn));
  exports["Functor"] = Functor;
  exports["map"] = map;
  exports["void"] = $$void;
  exports["voidRight"] = voidRight;
  exports["functorFn"] = functorFn;
})(PS["Data.Functor"] = PS["Data.Functor"] || {});
(function(exports) {
    "use strict";

  exports.concatArray = function (xs) {
    return function (ys) {
      if (xs.length === 0) return ys;
      if (ys.length === 0) return xs;
      return xs.concat(ys);
    };
  };
})(PS["Data.Semigroup"] = PS["Data.Semigroup"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var $foreign = PS["Data.Semigroup"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Void = PS["Data.Void"];        
  var Semigroup = function (append) {
      this.append = append;
  };                                                         
  var semigroupArray = new Semigroup($foreign.concatArray);
  var append = function (dict) {
      return dict.append;
  };
  var semigroupFn = function (dictSemigroup) {
      return new Semigroup(function (f) {
          return function (g) {
              return function (x) {
                  return append(dictSemigroup)(f(x))(g(x));
              };
          };
      });
  };
  exports["Semigroup"] = Semigroup;
  exports["append"] = append;
  exports["semigroupFn"] = semigroupFn;
  exports["semigroupArray"] = semigroupArray;
})(PS["Data.Semigroup"] = PS["Data.Semigroup"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var Data_Functor = PS["Data.Functor"];
  var Data_Semigroup = PS["Data.Semigroup"];        
  var Alt = function (__superclass_Data$dotFunctor$dotFunctor_0, alt) {
      this["__superclass_Data.Functor.Functor_0"] = __superclass_Data$dotFunctor$dotFunctor_0;
      this.alt = alt;
  };                                                       
  var alt = function (dict) {
      return dict.alt;
  };
  exports["Alt"] = Alt;
  exports["alt"] = alt;
})(PS["Control.Alt"] = PS["Control.Alt"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var $foreign = PS["Control.Apply"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Function = PS["Data.Function"];
  var Control_Category = PS["Control.Category"];        
  var Apply = function (__superclass_Data$dotFunctor$dotFunctor_0, apply) {
      this["__superclass_Data.Functor.Functor_0"] = __superclass_Data$dotFunctor$dotFunctor_0;
      this.apply = apply;
  };                      
  var apply = function (dict) {
      return dict.apply;
  };
  var lift2 = function (dictApply) {
      return function (f) {
          return function (a) {
              return function (b) {
                  return apply(dictApply)(Data_Functor.map(dictApply["__superclass_Data.Functor.Functor_0"]())(f)(a))(b);
              };
          };
      };
  };
  exports["Apply"] = Apply;
  exports["apply"] = apply;
  exports["lift2"] = lift2;
})(PS["Control.Apply"] = PS["Control.Apply"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var Control_Apply = PS["Control.Apply"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];        
  var Applicative = function (__superclass_Control$dotApply$dotApply_0, pure) {
      this["__superclass_Control.Apply.Apply_0"] = __superclass_Control$dotApply$dotApply_0;
      this.pure = pure;
  };
  var pure = function (dict) {
      return dict.pure;
  };
  var liftA1 = function (dictApplicative) {
      return function (f) {
          return function (a) {
              return Control_Apply.apply(dictApplicative["__superclass_Control.Apply.Apply_0"]())(pure(dictApplicative)(f))(a);
          };
      };
  };
  exports["Applicative"] = Applicative;
  exports["liftA1"] = liftA1;
  exports["pure"] = pure;
})(PS["Control.Applicative"] = PS["Control.Applicative"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Data_Functor = PS["Data.Functor"];        
  var Plus = function (__superclass_Control$dotAlt$dotAlt_0, empty) {
      this["__superclass_Control.Alt.Alt_0"] = __superclass_Control$dotAlt$dotAlt_0;
      this.empty = empty;
  };       
  var empty = function (dict) {
      return dict.empty;
  };
  exports["Plus"] = Plus;
  exports["empty"] = empty;
})(PS["Control.Plus"] = PS["Control.Plus"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Functor = PS["Data.Functor"];        
  var Alternative = function (__superclass_Control$dotApplicative$dotApplicative_0, __superclass_Control$dotPlus$dotPlus_1) {
      this["__superclass_Control.Applicative.Applicative_0"] = __superclass_Control$dotApplicative$dotApplicative_0;
      this["__superclass_Control.Plus.Plus_1"] = __superclass_Control$dotPlus$dotPlus_1;
  };
  exports["Alternative"] = Alternative;
})(PS["Control.Alternative"] = PS["Control.Alternative"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var $foreign = PS["Control.Bind"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];        
  var Bind = function (__superclass_Control$dotApply$dotApply_0, bind) {
      this["__superclass_Control.Apply.Apply_0"] = __superclass_Control$dotApply$dotApply_0;
      this.bind = bind;
  };                     
  var bind = function (dict) {
      return dict.bind;
  };
  var bindFlipped = function (dictBind) {
      return Data_Function.flip(bind(dictBind));
  };
  var composeKleisliFlipped = function (dictBind) {
      return function (f) {
          return function (g) {
              return function (a) {
                  return bindFlipped(dictBind)(f)(g(a));
              };
          };
      };
  };
  exports["Bind"] = Bind;
  exports["bind"] = bind;
  exports["bindFlipped"] = bindFlipped;
  exports["composeKleisliFlipped"] = composeKleisliFlipped;
})(PS["Control.Bind"] = PS["Control.Bind"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var Control_Category = PS["Control.Category"];        
  var Bifunctor = function (bimap) {
      this.bimap = bimap;
  };
  var bimap = function (dict) {
      return dict.bimap;
  };
  var lmap = function (dictBifunctor) {
      return function (f) {
          return bimap(dictBifunctor)(f)(Control_Category.id(Control_Category.categoryFn));
      };
  };
  var rmap = function (dictBifunctor) {
      return bimap(dictBifunctor)(Control_Category.id(Control_Category.categoryFn));
  };
  exports["Bifunctor"] = Bifunctor;
  exports["bimap"] = bimap;
  exports["lmap"] = lmap;
  exports["rmap"] = rmap;
})(PS["Data.Bifunctor"] = PS["Data.Bifunctor"] || {});
(function(exports) {
    "use strict";

  exports.foldrArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = len - 1; i >= 0; i--) {
          acc = f(xs[i])(acc);
        }
        return acc;
      };
    };
  };

  exports.foldlArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = 0; i < len; i++) {
          acc = f(acc)(xs[i]);
        }
        return acc;
      };
    };
  };
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];        
  var Monad = function (__superclass_Control$dotApplicative$dotApplicative_0, __superclass_Control$dotBind$dotBind_1) {
      this["__superclass_Control.Applicative.Applicative_0"] = __superclass_Control$dotApplicative$dotApplicative_0;
      this["__superclass_Control.Bind.Bind_1"] = __superclass_Control$dotBind$dotBind_1;
  };
  var ap = function (dictMonad) {
      return function (f) {
          return function (a) {
              return Control_Bind.bind(dictMonad["__superclass_Control.Bind.Bind_1"]())(f)(function (v) {
                  return Control_Bind.bind(dictMonad["__superclass_Control.Bind.Bind_1"]())(a)(function (v1) {
                      return Control_Applicative.pure(dictMonad["__superclass_Control.Applicative.Applicative_0"]())(v(v1));
                  });
              });
          };
      };
  };
  exports["Monad"] = Monad;
  exports["ap"] = ap;
})(PS["Control.Monad"] = PS["Control.Monad"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];        
  var MonadZero = function (__superclass_Control$dotAlternative$dotAlternative_1, __superclass_Control$dotMonad$dotMonad_0) {
      this["__superclass_Control.Alternative.Alternative_1"] = __superclass_Control$dotAlternative$dotAlternative_1;
      this["__superclass_Control.Monad.Monad_0"] = __superclass_Control$dotMonad$dotMonad_0;
  }; 
  var guard = function (dictMonadZero) {
      return function (v) {
          if (v) {
              return Control_Applicative.pure((dictMonadZero["__superclass_Control.Alternative.Alternative_1"]())["__superclass_Control.Applicative.Applicative_0"]())(Data_Unit.unit);
          };
          if (!v) {
              return Control_Plus.empty((dictMonadZero["__superclass_Control.Alternative.Alternative_1"]())["__superclass_Control.Plus.Plus_1"]());
          };
          throw new Error("Failed pattern match at Control.MonadZero line 52, column 1 - line 52, column 23: " + [ v.constructor.name ]);
      };
  };
  exports["MonadZero"] = MonadZero;
  exports["guard"] = guard;
})(PS["Control.MonadZero"] = PS["Control.MonadZero"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var Data_Function = PS["Data.Function"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Unit = PS["Data.Unit"];        
  var Monoid = function (__superclass_Data$dotSemigroup$dotSemigroup_0, mempty) {
      this["__superclass_Data.Semigroup.Semigroup_0"] = __superclass_Data$dotSemigroup$dotSemigroup_0;
      this.mempty = mempty;
  };       
  var mempty = function (dict) {
      return dict.mempty;
  };
  var monoidFn = function (dictMonoid) {
      return new Monoid(function () {
          return Data_Semigroup.semigroupFn(dictMonoid["__superclass_Data.Semigroup.Semigroup_0"]());
      }, Data_Function["const"](mempty(dictMonoid)));
  };
  exports["Monoid"] = Monoid;
  exports["mempty"] = mempty;
  exports["monoidFn"] = monoidFn;
})(PS["Data.Monoid"] = PS["Data.Monoid"] || {});
(function(exports) {
    "use strict";

  exports.refEq = function (r1) {
    return function (r2) {
      return r1 === r2;
    };
  };
})(PS["Data.Eq"] = PS["Data.Eq"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var $foreign = PS["Data.Eq"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Void = PS["Data.Void"];        
  var Eq = function (eq) {
      this.eq = eq;
  };                                    
  var eqInt = new Eq($foreign.refEq);    
  var eq = function (dict) {
      return dict.eq;
  };
  exports["Eq"] = Eq;
  exports["eq"] = eq;
  exports["eqInt"] = eqInt;
})(PS["Data.Eq"] = PS["Data.Eq"] || {});
(function(exports) {
    "use strict";

  exports.unsafeCompareImpl = function (lt) {
    return function (eq) {
      return function (gt) {
        return function (x) {
          return function (y) {
            return x < y ? lt : x === y ? eq : gt;
          };
        };
      };
    };
  };
})(PS["Data.Ord.Unsafe"] = PS["Data.Ord.Unsafe"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var Data_Eq = PS["Data.Eq"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];        
  var LT = (function () {
      function LT() {

      };
      LT.value = new LT();
      return LT;
  })();
  var GT = (function () {
      function GT() {

      };
      GT.value = new GT();
      return GT;
  })();
  var EQ = (function () {
      function EQ() {

      };
      EQ.value = new EQ();
      return EQ;
  })();
  exports["LT"] = LT;
  exports["GT"] = GT;
  exports["EQ"] = EQ;
})(PS["Data.Ordering"] = PS["Data.Ordering"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var $foreign = PS["Data.Ord.Unsafe"];
  var Data_Ordering = PS["Data.Ordering"];        
  var unsafeCompare = $foreign.unsafeCompareImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value);
  exports["unsafeCompare"] = unsafeCompare;
})(PS["Data.Ord.Unsafe"] = PS["Data.Ord.Unsafe"] || {});
(function(exports) {
    "use strict";

  exports.numSub = function (n1) {
    return function (n2) {
      return n1 - n2;
    };
  };
})(PS["Data.Ring"] = PS["Data.Ring"] || {});
(function(exports) {
    "use strict";

  exports.intAdd = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x + y | 0;
    };
  };

  exports.intMul = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x * y | 0;
    };
  };

  exports.numAdd = function (n1) {
    return function (n2) {
      return n1 + n2;
    };
  };

  exports.numMul = function (n1) {
    return function (n2) {
      return n1 * n2;
    };
  };
})(PS["Data.Semiring"] = PS["Data.Semiring"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var $foreign = PS["Data.Semiring"];
  var Data_Unit = PS["Data.Unit"];        
  var Semiring = function (add, mul, one, zero) {
      this.add = add;
      this.mul = mul;
      this.one = one;
      this.zero = zero;
  };
  var zero = function (dict) {
      return dict.zero;
  };                                 
  var semiringNumber = new Semiring($foreign.numAdd, $foreign.numMul, 1.0, 0.0);
  var semiringInt = new Semiring($foreign.intAdd, $foreign.intMul, 1, 0);
  var one = function (dict) {
      return dict.one;
  };
  var mul = function (dict) {
      return dict.mul;
  };
  var add = function (dict) {
      return dict.add;
  };
  exports["Semiring"] = Semiring;
  exports["add"] = add;
  exports["mul"] = mul;
  exports["one"] = one;
  exports["zero"] = zero;
  exports["semiringInt"] = semiringInt;
  exports["semiringNumber"] = semiringNumber;
})(PS["Data.Semiring"] = PS["Data.Semiring"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var $foreign = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Unit = PS["Data.Unit"];        
  var Ring = function (__superclass_Data$dotSemiring$dotSemiring_0, sub) {
      this["__superclass_Data.Semiring.Semiring_0"] = __superclass_Data$dotSemiring$dotSemiring_0;
      this.sub = sub;
  };
  var sub = function (dict) {
      return dict.sub;
  }; 
  var ringNumber = new Ring(function () {
      return Data_Semiring.semiringNumber;
  }, $foreign.numSub);
  exports["Ring"] = Ring;
  exports["sub"] = sub;
  exports["ringNumber"] = ringNumber;
})(PS["Data.Ring"] = PS["Data.Ring"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var $foreign = PS["Data.Ord"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Ord_Unsafe = PS["Data.Ord.Unsafe"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Void = PS["Data.Void"];
  var Data_Semiring = PS["Data.Semiring"];        
  var Ord = function (__superclass_Data$dotEq$dotEq_0, compare) {
      this["__superclass_Data.Eq.Eq_0"] = __superclass_Data$dotEq$dotEq_0;
      this.compare = compare;
  };                                
  var ordInt = new Ord(function () {
      return Data_Eq.eqInt;
  }, Data_Ord_Unsafe.unsafeCompare);
  var compare = function (dict) {
      return dict.compare;
  };
  exports["Ord"] = Ord;
  exports["compare"] = compare;
  exports["ordInt"] = ordInt;
})(PS["Data.Ord"] = PS["Data.Ord"] || {});
(function(exports) {
    "use strict";

  exports.topInt = 2147483647;
  exports.bottomInt = -2147483648;
})(PS["Data.Bounded"] = PS["Data.Bounded"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var $foreign = PS["Data.Bounded"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Ordering = PS["Data.Ordering"];        
  var Bounded = function (__superclass_Data$dotOrd$dotOrd_0, bottom, top) {
      this["__superclass_Data.Ord.Ord_0"] = __superclass_Data$dotOrd$dotOrd_0;
      this.bottom = bottom;
      this.top = top;
  };
  var top = function (dict) {
      return dict.top;
  };                                                 
  var boundedInt = new Bounded(function () {
      return Data_Ord.ordInt;
  }, $foreign.bottomInt, $foreign.topInt);
  var bottom = function (dict) {
      return dict.bottom;
  };
  exports["Bounded"] = Bounded;
  exports["bottom"] = bottom;
  exports["top"] = top;
  exports["boundedInt"] = boundedInt;
})(PS["Data.Bounded"] = PS["Data.Bounded"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Extend = PS["Control.Extend"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Functor = PS["Data.Functor"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Show = PS["Data.Show"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Function = PS["Data.Function"];
  var Control_Category = PS["Control.Category"];        
  var Nothing = (function () {
      function Nothing() {

      };
      Nothing.value = new Nothing();
      return Nothing;
  })();
  var Just = (function () {
      function Just(value0) {
          this.value0 = value0;
      };
      Just.create = function (value0) {
          return new Just(value0);
      };
      return Just;
  })();
  var maybe = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Nothing) {
                  return v;
              };
              if (v2 instanceof Just) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Maybe line 214, column 1 - line 214, column 22: " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };                                                      
  var functorMaybe = new Data_Functor.Functor(function (v) {
      return function (v1) {
          if (v1 instanceof Just) {
              return new Just(v(v1.value0));
          };
          return Nothing.value;
      };
  });
  var fromJust = function (dictPartial) {
      return function (v) {
          var __unused = function (dictPartial1) {
              return function ($dollar33) {
                  return $dollar33;
              };
          };
          return __unused(dictPartial)((function () {
              if (v instanceof Just) {
                  return v.value0;
              };
              throw new Error("Failed pattern match at Data.Maybe line 265, column 1 - line 265, column 21: " + [ v.constructor.name ]);
          })());
      };
  };
  var applyMaybe = new Control_Apply.Apply(function () {
      return functorMaybe;
  }, function (v) {
      return function (v1) {
          if (v instanceof Just) {
              return Data_Functor.map(functorMaybe)(v.value0)(v1);
          };
          if (v instanceof Nothing) {
              return Nothing.value;
          };
          throw new Error("Failed pattern match at Data.Maybe line 67, column 3 - line 67, column 31: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var bindMaybe = new Control_Bind.Bind(function () {
      return applyMaybe;
  }, function (v) {
      return function (v1) {
          if (v instanceof Just) {
              return v1(v.value0);
          };
          if (v instanceof Nothing) {
              return Nothing.value;
          };
          throw new Error("Failed pattern match at Data.Maybe line 126, column 3 - line 126, column 24: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var applicativeMaybe = new Control_Applicative.Applicative(function () {
      return applyMaybe;
  }, Just.create);
  var monadMaybe = new Control_Monad.Monad(function () {
      return applicativeMaybe;
  }, function () {
      return bindMaybe;
  });
  var altMaybe = new Control_Alt.Alt(function () {
      return functorMaybe;
  }, function (v) {
      return function (v1) {
          if (v instanceof Nothing) {
              return v1;
          };
          return v;
      };
  });
  var plusMaybe = new Control_Plus.Plus(function () {
      return altMaybe;
  }, Nothing.value);
  var alternativeMaybe = new Control_Alternative.Alternative(function () {
      return applicativeMaybe;
  }, function () {
      return plusMaybe;
  });
  var monadZeroMaybe = new Control_MonadZero.MonadZero(function () {
      return alternativeMaybe;
  }, function () {
      return monadMaybe;
  });
  exports["Nothing"] = Nothing;
  exports["Just"] = Just;
  exports["fromJust"] = fromJust;
  exports["maybe"] = maybe;
  exports["functorMaybe"] = functorMaybe;
  exports["applyMaybe"] = applyMaybe;
  exports["applicativeMaybe"] = applicativeMaybe;
  exports["altMaybe"] = altMaybe;
  exports["plusMaybe"] = plusMaybe;
  exports["alternativeMaybe"] = alternativeMaybe;
  exports["bindMaybe"] = bindMaybe;
  exports["monadMaybe"] = monadMaybe;
  exports["monadZeroMaybe"] = monadZeroMaybe;
})(PS["Data.Maybe"] = PS["Data.Maybe"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Functor = PS["Data.Functor"];        
  var Newtype = function (unwrap, wrap) {
      this.unwrap = unwrap;
      this.wrap = wrap;
  };
  var wrap = function (dict) {
      return dict.wrap;
  };
  var unwrap = function (dict) {
      return dict.unwrap;
  };
  var under = function (dictNewtype) {
      return function (dictNewtype1) {
          return function (v) {
              return function (f) {
                  return function ($28) {
                      return unwrap(dictNewtype1)(f(wrap(dictNewtype)($28)));
                  };
              };
          };
      };
  };
  var over = function (dictNewtype) {
      return function (dictNewtype1) {
          return function (v) {
              return function (f) {
                  return function ($30) {
                      return wrap(dictNewtype1)(f(unwrap(dictNewtype)($30)));
                  };
              };
          };
      };
  };
  exports["Newtype"] = Newtype;
  exports["over"] = over;
  exports["under"] = under;
  exports["unwrap"] = unwrap;
  exports["wrap"] = wrap;
})(PS["Data.Newtype"] = PS["Data.Newtype"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Extend = PS["Control.Extend"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Functor = PS["Data.Functor"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Data_Show = PS["Data.Show"];
  var Data_Semigroup = PS["Data.Semigroup"];        
  var First = function (x) {
      return x;
  };
  var semigroupFirst = new Data_Semigroup.Semigroup(function (v) {
      return function (v1) {
          if (v instanceof Data_Maybe.Just) {
              return v;
          };
          return v1;
      };
  });
  var newtypeFirst = new Data_Newtype.Newtype(function (n) {
      return n;
  }, First);
  var monoidFirst = new Data_Monoid.Monoid(function () {
      return semigroupFirst;
  }, Data_Maybe.Nothing.value);
  exports["First"] = First;
  exports["newtypeFirst"] = newtypeFirst;
  exports["semigroupFirst"] = semigroupFirst;
  exports["monoidFirst"] = monoidFirst;
})(PS["Data.Maybe.First"] = PS["Data.Maybe.First"] || {});
(function(exports) {
    "use strict";

  exports.boolConj = function (b1) {
    return function (b2) {
      return b1 && b2;
    };
  };

  exports.boolDisj = function (b1) {
    return function (b2) {
      return b1 || b2;
    };
  };

  exports.boolNot = function (b) {
    return !b;
  };
})(PS["Data.HeytingAlgebra"] = PS["Data.HeytingAlgebra"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var $foreign = PS["Data.HeytingAlgebra"];
  var Data_Unit = PS["Data.Unit"];        
  var HeytingAlgebra = function (conj, disj, ff, implies, not, tt) {
      this.conj = conj;
      this.disj = disj;
      this.ff = ff;
      this.implies = implies;
      this.not = not;
      this.tt = tt;
  };
  var tt = function (dict) {
      return dict.tt;
  };
  var not = function (dict) {
      return dict.not;
  };
  var implies = function (dict) {
      return dict.implies;
  };                 
  var ff = function (dict) {
      return dict.ff;
  };
  var disj = function (dict) {
      return dict.disj;
  };
  var heytingAlgebraBoolean = new HeytingAlgebra($foreign.boolConj, $foreign.boolDisj, false, function (a) {
      return function (b) {
          return disj(heytingAlgebraBoolean)(not(heytingAlgebraBoolean)(a))(b);
      };
  }, $foreign.boolNot, true);
  var conj = function (dict) {
      return dict.conj;
  };
  exports["HeytingAlgebra"] = HeytingAlgebra;
  exports["conj"] = conj;
  exports["disj"] = disj;
  exports["ff"] = ff;
  exports["implies"] = implies;
  exports["not"] = not;
  exports["tt"] = tt;
  exports["heytingAlgebraBoolean"] = heytingAlgebraBoolean;
})(PS["Data.HeytingAlgebra"] = PS["Data.HeytingAlgebra"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var $foreign = PS["Data.Foldable"];
  var Prelude = PS["Prelude"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Maybe_Last = PS["Data.Maybe.Last"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Monoid_Additive = PS["Data.Monoid.Additive"];
  var Data_Monoid_Conj = PS["Data.Monoid.Conj"];
  var Data_Monoid_Disj = PS["Data.Monoid.Disj"];
  var Data_Monoid_Dual = PS["Data.Monoid.Dual"];
  var Data_Monoid_Endo = PS["Data.Monoid.Endo"];
  var Data_Monoid_Multiplicative = PS["Data.Monoid.Multiplicative"];
  var Data_Newtype = PS["Data.Newtype"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Applicative = PS["Control.Applicative"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Function = PS["Data.Function"];
  var Control_Category = PS["Control.Category"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];        
  var Foldable = function (foldMap, foldl, foldr) {
      this.foldMap = foldMap;
      this.foldl = foldl;
      this.foldr = foldr;
  };
  var foldr = function (dict) {
      return dict.foldr;
  };
  var foldl = function (dict) {
      return dict.foldl;
  }; 
  var foldMapDefaultR = function (dictFoldable) {
      return function (dictMonoid) {
          return function (f) {
              return function (xs) {
                  return foldr(dictFoldable)(function (x) {
                      return function (acc) {
                          return Data_Semigroup.append(dictMonoid["__superclass_Data.Semigroup.Semigroup_0"]())(f(x))(acc);
                      };
                  })(Data_Monoid.mempty(dictMonoid))(xs);
              };
          };
      };
  };
  var foldableArray = new Foldable(function (dictMonoid) {
      return foldMapDefaultR(foldableArray)(dictMonoid);
  }, $foreign.foldlArray, $foreign.foldrArray);
  var foldMap = function (dict) {
      return dict.foldMap;
  };
  var fold = function (dictFoldable) {
      return function (dictMonoid) {
          return foldMap(dictFoldable)(dictMonoid)(Control_Category.id(Control_Category.categoryFn));
      };
  };
  exports["Foldable"] = Foldable;
  exports["fold"] = fold;
  exports["foldMap"] = foldMap;
  exports["foldMapDefaultR"] = foldMapDefaultR;
  exports["foldl"] = foldl;
  exports["foldr"] = foldr;
  exports["foldableArray"] = foldableArray;
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Extend = PS["Control.Extend"];
  var Data_Bifoldable = PS["Data.Bifoldable"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Bitraversable = PS["Data.Bitraversable"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Functor = PS["Data.Functor"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Data_Show = PS["Data.Show"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Function = PS["Data.Function"];        
  var Left = (function () {
      function Left(value0) {
          this.value0 = value0;
      };
      Left.create = function (value0) {
          return new Left(value0);
      };
      return Left;
  })();
  var Right = (function () {
      function Right(value0) {
          this.value0 = value0;
      };
      Right.create = function (value0) {
          return new Right(value0);
      };
      return Right;
  })();
  var functorEither = new Data_Functor.Functor(function (v) {
      return function (v1) {
          if (v1 instanceof Left) {
              return new Left(v1.value0);
          };
          if (v1 instanceof Right) {
              return new Right(v(v1.value0));
          };
          throw new Error("Failed pattern match at Data.Either line 35, column 3 - line 35, column 26: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var either = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Left) {
                  return v(v2.value0);
              };
              if (v2 instanceof Right) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Either line 224, column 1 - line 224, column 26: " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };
  var bifunctorEither = new Data_Bifunctor.Bifunctor(function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Left) {
                  return new Left(v(v2.value0));
              };
              if (v2 instanceof Right) {
                  return new Right(v1(v2.value0));
              };
              throw new Error("Failed pattern match at Data.Either line 42, column 3 - line 42, column 34: " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  });
  var applyEither = new Control_Apply.Apply(function () {
      return functorEither;
  }, function (v) {
      return function (v1) {
          if (v instanceof Left) {
              return new Left(v.value0);
          };
          if (v instanceof Right) {
              return Data_Functor.map(functorEither)(v.value0)(v1);
          };
          throw new Error("Failed pattern match at Data.Either line 78, column 3 - line 78, column 28: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  exports["Left"] = Left;
  exports["Right"] = Right;
  exports["either"] = either;
  exports["functorEither"] = functorEither;
  exports["bifunctorEither"] = bifunctorEither;
  exports["applyEither"] = applyEither;
})(PS["Data.Either"] = PS["Data.Either"] || {});
(function(exports) {
    "use strict";

  // module Unsafe.Coerce

  exports.unsafeCoerce = function (x) {
    return x;
  };
})(PS["Unsafe.Coerce"] = PS["Unsafe.Coerce"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var $foreign = PS["Unsafe.Coerce"];
  exports["unsafeCoerce"] = $foreign.unsafeCoerce;
})(PS["Unsafe.Coerce"] = PS["Unsafe.Coerce"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var Unsafe_Coerce = PS["Unsafe.Coerce"];        
  var runExists = Unsafe_Coerce.unsafeCoerce;
  var mkExists = Unsafe_Coerce.unsafeCoerce;
  exports["mkExists"] = mkExists;
  exports["runExists"] = runExists;
})(PS["Data.Exists"] = PS["Data.Exists"] || {});
(function(exports) {
    "use strict";

  exports.pureE = function (a) {
    return function () {
      return a;
    };
  };

  exports.bindE = function (a) {
    return function (f) {
      return function () {
        return f(a())();
      };
    };
  };
})(PS["Control.Monad.Eff"] = PS["Control.Monad.Eff"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var $foreign = PS["Control.Monad.Eff"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];        
  var monadEff = new Control_Monad.Monad(function () {
      return applicativeEff;
  }, function () {
      return bindEff;
  });
  var bindEff = new Control_Bind.Bind(function () {
      return applyEff;
  }, $foreign.bindE);
  var applyEff = new Control_Apply.Apply(function () {
      return functorEff;
  }, Control_Monad.ap(monadEff));
  var applicativeEff = new Control_Applicative.Applicative(function () {
      return applyEff;
  }, $foreign.pureE);
  var functorEff = new Data_Functor.Functor(Control_Applicative.liftA1(applicativeEff));
  exports["functorEff"] = functorEff;
  exports["applyEff"] = applyEff;
  exports["applicativeEff"] = applicativeEff;
  exports["bindEff"] = bindEff;
  exports["monadEff"] = monadEff;
})(PS["Control.Monad.Eff"] = PS["Control.Monad.Eff"] || {});
(function(exports) {
    "use strict";

  exports.unsafeCoerceEff = function (f) {
    return f;
  };
})(PS["Control.Monad.Eff.Unsafe"] = PS["Control.Monad.Eff.Unsafe"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var $foreign = PS["Control.Monad.Eff.Unsafe"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  exports["unsafeCoerceEff"] = $foreign.unsafeCoerceEff;
})(PS["Control.Monad.Eff.Unsafe"] = PS["Control.Monad.Eff.Unsafe"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_BooleanAlgebra = PS["Data.BooleanAlgebra"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Ring = PS["Data.Ring"];
  var Data_CommutativeRing = PS["Data.CommutativeRing"];
  var Data_Field = PS["Data.Field"];
  var Data_Show = PS["Data.Show"];
  var Data_Functor = PS["Data.Functor"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];        
  var Identity = function (x) {
      return x;
  };
  var newtypeIdentity = new Data_Newtype.Newtype(function (n) {
      return n;
  }, Identity);
  var functorIdentity = new Data_Functor.Functor(function (f) {
      return function (v) {
          return f(v);
      };
  });
  exports["Identity"] = Identity;
  exports["newtypeIdentity"] = newtypeIdentity;
  exports["functorIdentity"] = functorIdentity;
})(PS["Data.Identity"] = PS["Data.Identity"] || {});
(function(exports) {
    "use strict";

  // module Partial.Unsafe

  exports.unsafePartial = function (f) {
    return f();
  };
})(PS["Partial.Unsafe"] = PS["Partial.Unsafe"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var $foreign = PS["Partial.Unsafe"];
  var Partial = PS["Partial"];
  exports["unsafePartial"] = $foreign.unsafePartial;
})(PS["Partial.Unsafe"] = PS["Partial.Unsafe"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Unsafe = PS["Control.Monad.Eff.Unsafe"];
  var Control_Monad_ST = PS["Control.Monad.ST"];
  var Data_Either = PS["Data.Either"];
  var Data_Identity = PS["Data.Identity"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Data_Functor = PS["Data.Functor"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Applicative = PS["Control.Applicative"];
  var Data_Unit = PS["Data.Unit"];        
  var Loop = (function () {
      function Loop(value0) {
          this.value0 = value0;
      };
      Loop.create = function (value0) {
          return new Loop(value0);
      };
      return Loop;
  })();
  var Done = (function () {
      function Done(value0) {
          this.value0 = value0;
      };
      Done.create = function (value0) {
          return new Done(value0);
      };
      return Done;
  })();
  var MonadRec = function (__superclass_Control$dotMonad$dotMonad_0, tailRecM) {
      this["__superclass_Control.Monad.Monad_0"] = __superclass_Control$dotMonad$dotMonad_0;
      this.tailRecM = tailRecM;
  };
  var tailRecM = function (dict) {
      return dict.tailRecM;
  }; 
  var forever = function (dictMonadRec) {
      return function (ma) {
          return tailRecM(dictMonadRec)(function (u) {
              return Data_Functor.voidRight((((dictMonadRec["__superclass_Control.Monad.Monad_0"]())["__superclass_Control.Bind.Bind_1"]())["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]())(new Loop(u))(ma);
          })(Data_Unit.unit);
      };
  };
  exports["Loop"] = Loop;
  exports["Done"] = Done;
  exports["MonadRec"] = MonadRec;
  exports["forever"] = forever;
  exports["tailRecM"] = tailRecM;
})(PS["Control.Monad.Rec.Class"] = PS["Control.Monad.Rec.Class"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var Prelude = PS["Prelude"];        
  var MonadTrans = function (lift) {
      this.lift = lift;
  };
  var lift = function (dict) {
      return dict.lift;
  };
  exports["MonadTrans"] = MonadTrans;
  exports["lift"] = lift;
})(PS["Control.Monad.Trans.Class"] = PS["Control.Monad.Trans.Class"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Either = PS["Data.Either"];
  var Data_Exists = PS["Data.Exists"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Monad_Trans_Class = PS["Control.Monad.Trans.Class"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];        
  var Bound = (function () {
      function Bound(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Bound.create = function (value0) {
          return function (value1) {
              return new Bound(value0, value1);
          };
      };
      return Bound;
  })();
  var FreeT = (function () {
      function FreeT(value0) {
          this.value0 = value0;
      };
      FreeT.create = function (value0) {
          return new FreeT(value0);
      };
      return FreeT;
  })();
  var Bind = (function () {
      function Bind(value0) {
          this.value0 = value0;
      };
      Bind.create = function (value0) {
          return new Bind(value0);
      };
      return Bind;
  })();
  var monadTransFreeT = function (dictFunctor) {
      return new Control_Monad_Trans_Class.MonadTrans(function (dictMonad) {
          return function (ma) {
              return new FreeT(function (v) {
                  return Data_Functor.map(((dictMonad["__superclass_Control.Bind.Bind_1"]())["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]())(Data_Either.Left.create)(ma);
              });
          };
      });
  };
  var freeT = FreeT.create;
  var bound = function (m) {
      return function (f) {
          return new Bind(Data_Exists.mkExists(new Bound(m, f)));
      };
  };
  var functorFreeT = function (dictFunctor) {
      return function (dictFunctor1) {
          return new Data_Functor.Functor(function (f) {
              return function (v) {
                  if (v instanceof FreeT) {
                      return new FreeT(function (v1) {
                          return Data_Functor.map(dictFunctor1)(Data_Bifunctor.bimap(Data_Either.bifunctorEither)(f)(Data_Functor.map(dictFunctor)(Data_Functor.map(functorFreeT(dictFunctor)(dictFunctor1))(f))))(v.value0(Data_Unit.unit));
                      });
                  };
                  if (v instanceof Bind) {
                      return Data_Exists.runExists(function (v1) {
                          return bound(v1.value0)(function ($95) {
                              return Data_Functor.map(functorFreeT(dictFunctor)(dictFunctor1))(f)(v1.value1($95));
                          });
                      })(v.value0);
                  };
                  throw new Error("Failed pattern match at Control.Monad.Free.Trans line 54, column 3 - line 54, column 69: " + [ f.constructor.name, v.constructor.name ]);
              };
          });
      };
  };
  var monadFreeT = function (dictFunctor) {
      return function (dictMonad) {
          return new Control_Monad.Monad(function () {
              return applicativeFreeT(dictFunctor)(dictMonad);
          }, function () {
              return bindFreeT(dictFunctor)(dictMonad);
          });
      };
  };
  var bindFreeT = function (dictFunctor) {
      return function (dictMonad) {
          return new Control_Bind.Bind(function () {
              return applyFreeT(dictFunctor)(dictMonad);
          }, function (v) {
              return function (f) {
                  if (v instanceof Bind) {
                      return Data_Exists.runExists(function (v1) {
                          return bound(v1.value0)(function (x) {
                              return bound(function (v2) {
                                  return v1.value1(x);
                              })(f);
                          });
                      })(v.value0);
                  };
                  return bound(function (v1) {
                      return v;
                  })(f);
              };
          });
      };
  };
  var applyFreeT = function (dictFunctor) {
      return function (dictMonad) {
          return new Control_Apply.Apply(function () {
              return functorFreeT(dictFunctor)(((dictMonad["__superclass_Control.Bind.Bind_1"]())["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]());
          }, Control_Monad.ap(monadFreeT(dictFunctor)(dictMonad)));
      };
  };
  var applicativeFreeT = function (dictFunctor) {
      return function (dictMonad) {
          return new Control_Applicative.Applicative(function () {
              return applyFreeT(dictFunctor)(dictMonad);
          }, function (a) {
              return new FreeT(function (v) {
                  return Control_Applicative.pure(dictMonad["__superclass_Control.Applicative.Applicative_0"]())(new Data_Either.Left(a));
              });
          });
      };
  };
  var liftFreeT = function (dictFunctor) {
      return function (dictMonad) {
          return function (fa) {
              return new FreeT(function (v) {
                  return Control_Applicative.pure(dictMonad["__superclass_Control.Applicative.Applicative_0"]())(new Data_Either.Right(Data_Functor.map(dictFunctor)(Control_Applicative.pure(applicativeFreeT(dictFunctor)(dictMonad)))(fa)));
              });
          };
      };
  };
  var resume = function (dictFunctor) {
      return function (dictMonadRec) {
          var go = function (v) {
              if (v instanceof FreeT) {
                  return Data_Functor.map((((dictMonadRec["__superclass_Control.Monad.Monad_0"]())["__superclass_Control.Bind.Bind_1"]())["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]())(Control_Monad_Rec_Class.Done.create)(v.value0(Data_Unit.unit));
              };
              if (v instanceof Bind) {
                  return Data_Exists.runExists(function (v1) {
                      var $76 = v1.value0(Data_Unit.unit);
                      if ($76 instanceof FreeT) {
                          return Control_Bind.bind((dictMonadRec["__superclass_Control.Monad.Monad_0"]())["__superclass_Control.Bind.Bind_1"]())($76.value0(Data_Unit.unit))(function (v2) {
                              if (v2 instanceof Data_Either.Left) {
                                  return Control_Applicative.pure((dictMonadRec["__superclass_Control.Monad.Monad_0"]())["__superclass_Control.Applicative.Applicative_0"]())(new Control_Monad_Rec_Class.Loop(v1.value1(v2.value0)));
                              };
                              if (v2 instanceof Data_Either.Right) {
                                  return Control_Applicative.pure((dictMonadRec["__superclass_Control.Monad.Monad_0"]())["__superclass_Control.Applicative.Applicative_0"]())(new Control_Monad_Rec_Class.Done(new Data_Either.Right(Data_Functor.map(dictFunctor)(function (h) {
                                      return Control_Bind.bind(bindFreeT(dictFunctor)(dictMonadRec["__superclass_Control.Monad.Monad_0"]()))(h)(v1.value1);
                                  })(v2.value0))));
                              };
                              throw new Error("Failed pattern match at Control.Monad.Free.Trans line 48, column 9 - line 50, column 67: " + [ v2.constructor.name ]);
                          });
                      };
                      if ($76 instanceof Bind) {
                          return Data_Exists.runExists(function (v2) {
                              return Control_Applicative.pure((dictMonadRec["__superclass_Control.Monad.Monad_0"]())["__superclass_Control.Applicative.Applicative_0"]())(new Control_Monad_Rec_Class.Loop(Control_Bind.bind(bindFreeT(dictFunctor)(dictMonadRec["__superclass_Control.Monad.Monad_0"]()))(v2.value0(Data_Unit.unit))(function (z) {
                                  return Control_Bind.bind(bindFreeT(dictFunctor)(dictMonadRec["__superclass_Control.Monad.Monad_0"]()))(v2.value1(z))(v1.value1);
                              })));
                          })($76.value0);
                      };
                      throw new Error("Failed pattern match at Control.Monad.Free.Trans line 45, column 5 - line 51, column 98: " + [ $76.constructor.name ]);
                  })(v.value0);
              };
              throw new Error("Failed pattern match at Control.Monad.Free.Trans line 43, column 3 - line 43, column 35: " + [ v.constructor.name ]);
          };
          return Control_Monad_Rec_Class.tailRecM(dictMonadRec)(go);
      };
  };
  var runFreeT = function (dictFunctor) {
      return function (dictMonadRec) {
          return function (interp) {
              var go = function (v) {
                  if (v instanceof Data_Either.Left) {
                      return Control_Applicative.pure((dictMonadRec["__superclass_Control.Monad.Monad_0"]())["__superclass_Control.Applicative.Applicative_0"]())(new Control_Monad_Rec_Class.Done(v.value0));
                  };
                  if (v instanceof Data_Either.Right) {
                      return Data_Functor.map((((dictMonadRec["__superclass_Control.Monad.Monad_0"]())["__superclass_Control.Bind.Bind_1"]())["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]())(Control_Monad_Rec_Class.Loop.create)(interp(v.value0));
                  };
                  throw new Error("Failed pattern match at Control.Monad.Free.Trans line 102, column 3 - line 102, column 30: " + [ v.constructor.name ]);
              };
              return Control_Monad_Rec_Class.tailRecM(dictMonadRec)(Control_Bind.composeKleisliFlipped((dictMonadRec["__superclass_Control.Monad.Monad_0"]())["__superclass_Control.Bind.Bind_1"]())(go)(resume(dictFunctor)(dictMonadRec)));
          };
      };
  };
  var monadRecFreeT = function (dictFunctor) {
      return function (dictMonad) {
          return new Control_Monad_Rec_Class.MonadRec(function () {
              return monadFreeT(dictFunctor)(dictMonad);
          }, function (f) {
              var go = function (s) {
                  return Control_Bind.bind(bindFreeT(dictFunctor)(dictMonad))(f(s))(function (v) {
                      if (v instanceof Control_Monad_Rec_Class.Loop) {
                          return go(v.value0);
                      };
                      if (v instanceof Control_Monad_Rec_Class.Done) {
                          return Control_Applicative.pure(applicativeFreeT(dictFunctor)(dictMonad))(v.value0);
                      };
                      throw new Error("Failed pattern match at Control.Monad.Free.Trans line 76, column 7 - line 78, column 25: " + [ v.constructor.name ]);
                  });
              };
              return go;
          });
      };
  };
  exports["freeT"] = freeT;
  exports["liftFreeT"] = liftFreeT;
  exports["resume"] = resume;
  exports["runFreeT"] = runFreeT;
  exports["functorFreeT"] = functorFreeT;
  exports["applyFreeT"] = applyFreeT;
  exports["applicativeFreeT"] = applicativeFreeT;
  exports["bindFreeT"] = bindFreeT;
  exports["monadFreeT"] = monadFreeT;
  exports["monadTransFreeT"] = monadTransFreeT;
  exports["monadRecFreeT"] = monadRecFreeT;
})(PS["Control.Monad.Free.Trans"] = PS["Control.Monad.Free.Trans"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Newtype = PS["Data.Newtype"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Control_Category = PS["Control.Category"];        
  var Profunctor = function (dimap) {
      this.dimap = dimap;
  };
  var profunctorFn = new Profunctor(function (a2b) {
      return function (c2d) {
          return function (b2c) {
              return function ($9) {
                  return c2d(b2c(a2b($9)));
              };
          };
      };
  });
  var dimap = function (dict) {
      return dict.dimap;
  };
  var rmap = function (dictProfunctor) {
      return function (b2c) {
          return dimap(dictProfunctor)(Control_Category.id(Control_Category.categoryFn))(b2c);
      };
  };
  exports["Profunctor"] = Profunctor;
  exports["dimap"] = dimap;
  exports["rmap"] = rmap;
  exports["profunctorFn"] = profunctorFn;
})(PS["Data.Profunctor"] = PS["Data.Profunctor"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Biapplicative = PS["Control.Biapplicative"];
  var Control_Biapply = PS["Control.Biapply"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Lazy = PS["Control.Lazy"];
  var Data_Bifoldable = PS["Data.Bifoldable"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Bitraversable = PS["Data.Bitraversable"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Show = PS["Data.Show"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Bounded = PS["Data.Bounded"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Ring = PS["Data.Ring"];
  var Data_CommutativeRing = PS["Data.CommutativeRing"];
  var Data_BooleanAlgebra = PS["Data.BooleanAlgebra"];
  var Data_Functor = PS["Data.Functor"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Data_Function = PS["Data.Function"];
  var Data_Unit = PS["Data.Unit"];        
  var Tuple = (function () {
      function Tuple(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Tuple.create = function (value0) {
          return function (value1) {
              return new Tuple(value0, value1);
          };
      };
      return Tuple;
  })();
  var snd = function (v) {
      return v.value1;
  };
  var functorTuple = new Data_Functor.Functor(function (f) {
      return function (v) {
          return new Tuple(v.value0, f(v.value1));
      };
  });                                                                                                   
  var fst = function (v) {
      return v.value0;
  };
  var bifunctorTuple = new Data_Bifunctor.Bifunctor(function (f) {
      return function (g) {
          return function (v) {
              return new Tuple(f(v.value0), g(v.value1));
          };
      };
  });
  exports["Tuple"] = Tuple;
  exports["fst"] = fst;
  exports["snd"] = snd;
  exports["functorTuple"] = functorTuple;
  exports["bifunctorTuple"] = bifunctorTuple;
})(PS["Data.Tuple"] = PS["Data.Tuple"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var Control_Category = PS["Control.Category"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];        
  var MonadEff = function (__superclass_Control$dotMonad$dotMonad_0, liftEff) {
      this["__superclass_Control.Monad.Monad_0"] = __superclass_Control$dotMonad$dotMonad_0;
      this.liftEff = liftEff;
  };                                                   
  var liftEff = function (dict) {
      return dict.liftEff;
  };
  exports["MonadEff"] = MonadEff;
  exports["liftEff"] = liftEff;
})(PS["Control.Monad.Eff.Class"] = PS["Control.Monad.Eff.Class"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Monad_Cont_Trans = PS["Control.Monad.Cont.Trans"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Class = PS["Control.Monad.Eff.Class"];
  var Control_Monad_Eff_Ref = PS["Control.Monad.Eff.Ref"];
  var Control_Monad_Eff_Unsafe = PS["Control.Monad.Eff.Unsafe"];
  var Control_Monad_Except_Trans = PS["Control.Monad.Except.Trans"];
  var Control_Monad_Maybe_Trans = PS["Control.Monad.Maybe.Trans"];
  var Control_Monad_Reader_Trans = PS["Control.Monad.Reader.Trans"];
  var Control_Monad_Writer_Trans = PS["Control.Monad.Writer.Trans"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Either = PS["Data.Either"];
  var Data_Functor_Compose = PS["Data.Functor.Compose"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Functor = PS["Data.Functor"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Control_Apply = PS["Control.Apply"];
  var Data_Function = PS["Data.Function"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Applicative = PS["Control.Applicative"];
  var Data_Unit = PS["Data.Unit"];
  var Parallel = function (__superclass_Control$dotApplicative$dotApplicative_1, __superclass_Control$dotMonad$dotMonad_0, parallel, sequential) {
      this["__superclass_Control.Applicative.Applicative_1"] = __superclass_Control$dotApplicative$dotApplicative_1;
      this["__superclass_Control.Monad.Monad_0"] = __superclass_Control$dotMonad$dotMonad_0;
      this.parallel = parallel;
      this.sequential = sequential;
  };                                                           
  var sequential = function (dict) {
      return dict.sequential;
  };
  var parallel = function (dict) {
      return dict.parallel;
  };
  exports["Parallel"] = Parallel;
  exports["parallel"] = parallel;
  exports["sequential"] = sequential;
})(PS["Control.Parallel.Class"] = PS["Control.Parallel.Class"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Monad_Free_Trans = PS["Control.Monad.Free.Trans"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Monad_Trans_Class = PS["Control.Monad.Trans.Class"];
  var Control_Parallel = PS["Control.Parallel"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Either = PS["Data.Either"];
  var Data_Identity = PS["Data.Identity"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Profunctor = PS["Data.Profunctor"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Functor = PS["Data.Functor"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Control_Applicative = PS["Control.Applicative"];
  var Data_Unit = PS["Data.Unit"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Parallel_Class = PS["Control.Parallel.Class"];
  var Control_Category = PS["Control.Category"];
  var CoTransform = (function () {
      function CoTransform(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      CoTransform.create = function (value0) {
          return function (value1) {
              return new CoTransform(value0, value1);
          };
      };
      return CoTransform;
  })();
  var runProcess = function (dictMonadRec) {
      return Control_Monad_Free_Trans.runFreeT(Data_Identity.functorIdentity)(dictMonadRec)(function ($162) {
          return Control_Applicative.pure((dictMonadRec["__superclass_Control.Monad.Monad_0"]())["__superclass_Control.Applicative.Applicative_0"]())(Data_Newtype.unwrap(Data_Identity.newtypeIdentity)($162));
      });
  };
  var fuseWith = function (dictFunctor) {
      return function (dictFunctor1) {
          return function (dictFunctor2) {
              return function (dictMonadRec) {
                  return function (dictParallel) {
                      return function (zap) {
                          return function (fs) {
                              return function (gs) {
                                  var go = function (v) {
                                      return Control_Bind.bind((dictMonadRec["__superclass_Control.Monad.Monad_0"]())["__superclass_Control.Bind.Bind_1"]())(Control_Parallel_Class.sequential(dictParallel)(Control_Apply.apply((dictParallel["__superclass_Control.Applicative.Applicative_1"]())["__superclass_Control.Apply.Apply_0"]())(Data_Functor.map(((dictParallel["__superclass_Control.Applicative.Applicative_1"]())["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]())(Control_Apply.lift2(Data_Either.applyEither)(zap(Data_Tuple.Tuple.create)))(Control_Parallel_Class.parallel(dictParallel)(Control_Monad_Free_Trans.resume(dictFunctor)(dictMonadRec)(v.value0))))(Control_Parallel_Class.parallel(dictParallel)(Control_Monad_Free_Trans.resume(dictFunctor1)(dictMonadRec)(v.value1)))))(function (v1) {
                                          if (v1 instanceof Data_Either.Left) {
                                              return Control_Applicative.pure((dictMonadRec["__superclass_Control.Monad.Monad_0"]())["__superclass_Control.Applicative.Applicative_0"]())(new Data_Either.Left(v1.value0));
                                          };
                                          if (v1 instanceof Data_Either.Right) {
                                              return Control_Applicative.pure((dictMonadRec["__superclass_Control.Monad.Monad_0"]())["__superclass_Control.Applicative.Applicative_0"]())(new Data_Either.Right(Data_Functor.map(dictFunctor2)(function (t) {
                                                  return Control_Monad_Free_Trans.freeT(function (v2) {
                                                      return go(t);
                                                  });
                                              })(v1.value0)));
                                          };
                                          throw new Error("Failed pattern match at Control.Coroutine line 74, column 5 - line 76, column 63: " + [ v1.constructor.name ]);
                                      });
                                  };
                                  return Control_Monad_Free_Trans.freeT(function (v) {
                                      return go(new Data_Tuple.Tuple(fs, gs));
                                  });
                              };
                          };
                      };
                  };
              };
          };
      };
  };
  var bifunctorTransform = new Data_Bifunctor.Bifunctor(function (f) {
      return function (g) {
          return function (v) {
              return function ($163) {
                  return Data_Bifunctor.bimap(Data_Tuple.bifunctorTuple)(f)(g)(v($163));
              };
          };
      };
  });
  var functorTransform = new Data_Functor.Functor(Data_Bifunctor.rmap(bifunctorTransform));
  var transform = function (dictMonad) {
      return function (f) {
          return Control_Monad_Free_Trans.liftFreeT(functorTransform)(dictMonad)(function (i) {
              return new Data_Tuple.Tuple(f(i), Data_Unit.unit);
          });
      };
  };
  var bifunctorCoTransform = new Data_Bifunctor.Bifunctor(function (f) {
      return function (g) {
          return function (v) {
              return new CoTransform(f(v.value0), function ($164) {
                  return g(v.value1($164));
              });
          };
      };
  });
  var functorCoTransform = new Data_Functor.Functor(Data_Bifunctor.rmap(bifunctorCoTransform));
  var cotransform = function (dictMonad) {
      return function (o) {
          return Control_Monad_Free_Trans.freeT(function (v) {
              return Control_Applicative.pure(dictMonad["__superclass_Control.Applicative.Applicative_0"]())(new Data_Either.Right(new CoTransform(o, Control_Applicative.pure(Control_Monad_Free_Trans.applicativeFreeT(functorCoTransform)(dictMonad)))));
          });
      };
  };
  var fuseCoTransform = function (dictMonadRec) {
      return function (dictParallel) {
          return fuseWith(functorTransform)(functorCoTransform)(Data_Identity.functorIdentity)(dictMonadRec)(dictParallel)(function (f) {
              return function (v) {
                  return function (v1) {
                      var $142 = v(v1.value0);
                      return f($142.value1)(v1.value1($142.value0));
                  };
              };
          });
      };
  };
  var transformCoTransformL = function (dictMonadRec) {
      return function (dictParallel) {
          return fuseWith(functorTransform)(functorCoTransform)(functorCoTransform)(dictMonadRec)(dictParallel)(function (f) {
              return function (v) {
                  return function (v1) {
                      return new CoTransform(v1.value0, function (i1) {
                          var $149 = v(i1);
                          return f($149.value1)(v1.value1($149.value0));
                      });
                  };
              };
          });
      };
  };
  var transformCoTransformR = function (dictMonadRec) {
      return function (dictParallel) {
          return fuseWith(functorCoTransform)(functorTransform)(functorCoTransform)(dictMonadRec)(dictParallel)(function (f) {
              return function (v) {
                  return function (v1) {
                      var $156 = v1(v.value0);
                      return new CoTransform($156.value0, function ($165) {
                          return (function (v2) {
                              return f(v2)($156.value1);
                          })(v.value1($165));
                      });
                  };
              };
          });
      };
  };
  exports["CoTransform"] = CoTransform;
  exports["cotransform"] = cotransform;
  exports["fuseCoTransform"] = fuseCoTransform;
  exports["fuseWith"] = fuseWith;
  exports["runProcess"] = runProcess;
  exports["transform"] = transform;
  exports["transformCoTransformL"] = transformCoTransformL;
  exports["transformCoTransformR"] = transformCoTransformR;
  exports["bifunctorTransform"] = bifunctorTransform;
  exports["functorTransform"] = functorTransform;
  exports["bifunctorCoTransform"] = bifunctorCoTransform;
  exports["functorCoTransform"] = functorCoTransform;
})(PS["Control.Coroutine"] = PS["Control.Coroutine"] || {});
(function(exports) {
  /* globals setTimeout, clearTimeout, setImmediate, clearImmediate */
  "use strict";

  exports._cancelWith = function (nonCanceler, aff, canceler1) {
    return function (success, error) {
      var canceler2 = aff(success, error);

      return function (e) {
        return function (success, error) {
          var cancellations = 0;
          var result = false;
          var errored = false;

          var s = function (bool) {
            cancellations = cancellations + 1;
            result = result || bool;

            if (cancellations === 2 && !errored) {
              success(result);
            }
          };

          var f = function (err) {
            if (!errored) {
              errored = true;
              error(err);
            }
          };

          canceler2(e)(s, f);
          canceler1(e)(s, f);

          return nonCanceler;
        };
      };
    };
  };

  exports._unsafeInterleaveAff = function (aff) {
    return aff;
  };

  exports._forkAff = function (nonCanceler, aff) {
    var voidF = function () {};

    return function (success) {
      var canceler = aff(voidF, voidF);
      success(canceler);
      return nonCanceler;
    };
  };

  exports._makeAff = function (cb) {
    return function (success, error) {
      try {
        return cb(function (e) {
          return function () {
            error(e);
          };
        })(function (v) {
          return function () {
            success(v);
          };
        })();
      } catch (err) {
        error(err);
      }
    };
  };

  exports._pure = function (nonCanceler, v) {
    return function (success) {
      success(v);
      return nonCanceler;
    };
  };

  exports._fmap = function (f, aff) {
    return function (success, error) {
      try {
        return aff(function (v) {
          try {
            var v2 = f(v);
          } catch (err) {
            error(err);
          }
          success(v2);
        }, error);
      } catch (err) {
        error(err);
      }
    };
  };

  exports._bind = function (alwaysCanceler, aff, f) {
    return function (success, error) {
      var canceler1, canceler2;

      var isCanceled    = false;
      var requestCancel = false;

      var onCanceler = function () {};

      canceler1 = aff(function (v) {
        if (requestCancel) {
          isCanceled = true;

          return alwaysCanceler;
        } else {
          canceler2 = f(v)(success, error);

          onCanceler(canceler2);

          return canceler2;
        }
      }, error);

      return function (e) {
        return function (s, f) {
          requestCancel = true;

          if (canceler2 !== undefined) {
            return canceler2(e)(s, f);
          } else {
            return canceler1(e)(function (bool) {
              if (bool || isCanceled) {
                s(true);
              } else {
                onCanceler = function (canceler) {
                  canceler(e)(s, f);
                };
              }
            }, f);
          }
        };
      };
    };
  };

  exports._attempt = function (Left, Right, aff) {
    return function (success) {
      try {
        return aff(function (v) {
          success(Right(v));
        }, function (e) {
          success(Left(e));
        });
      } catch (err) {
        success(Left(err));
      }
    };
  };

  exports._runAff = function (errorT, successT, aff) {
    return function () {
      return aff(function (v) {
        successT(v)();
      }, function (e) {
        errorT(e)();
      });
    };
  };

  exports._liftEff = function (nonCanceler, e) {
    return function (success, error) {
      var result;
      try {
        result = e();
      } catch (err) {
        error(err);
        return nonCanceler;
      }

      success(result);
      return nonCanceler;
    };
  };

  exports._tailRecM = function (isLeft, f, a) {
    return function (success, error) {
      return function go (acc) {
        var result, status, canceler;

        // Observes synchronous effects using a flag.
        //   status = 0 (unresolved status)
        //   status = 1 (synchronous effect)
        //   status = 2 (asynchronous effect)

        var csuccess = function (v) {
          // If the status is still unresolved, we have observed a
          // synchronous effect. Otherwise, the status will be `2`.
          if (status === 0) {
            // Store the result for further synchronous processing.
            result = v;
            status = 1;
          } else {
            // When we have observed an asynchronous effect, we use normal
            // recursion. This is safe because we will be on a new stack.
            if (isLeft(v)) {
              go(v.value0);
            } else {
              try {
                success(v.value0);
              } catch (err) {
                error(err);
              }
            }
          }
        };

        while (true) {
          status = 0;
          canceler = f(acc)(csuccess, error);

          // If the status has already resolved to `1` by our Aff handler, then
          // we have observed a synchronous effect. Otherwise it will still be
          // `0`.
          if (status === 1) {
            // When we have observed a synchronous effect, we merely swap out the
            // accumulator and continue the loop, preserving stack.
            if (isLeft(result)) {
              acc = result.value0;
              continue;
            } else {
              try {
                success(result.value0);
              } catch (err) {
                error(err);
              }
            }
          } else {
            // If the status has not resolved yet, then we have observed an
            // asynchronous effect.
            status = 2;
          }
          return canceler;
        }

      }(a);
    };
  };
})(PS["Control.Monad.Aff"] = PS["Control.Monad.Aff"] || {});
(function(exports) {
    "use strict";

  exports._makeVar = function (nonCanceler) {
    return function (success, error) {
      try {
        success({
          consumers: [],
          producers: [],
          error: undefined
        });
      } catch (err) {
        error(err);
      }

      return nonCanceler;
    };
  };

  exports._takeVar = function (nonCanceler, avar) {
    return function (success, error) {
      if (avar.error !== undefined) {
        error(avar.error);
      } else if (avar.producers.length > 0) {
        var producer = avar.producers.shift();

        producer(success, error);
      } else {
        avar.consumers.push({ success: success, error: error });
      }

      return nonCanceler;
    };
  };

  exports._putVar = function (nonCanceler, avar, a) {
    return function (success, error) {
      if (avar.error !== undefined) {
        error(avar.error);
      } else if (avar.consumers.length === 0) {
        avar.producers.push(function (success, error) {
          try {
            success(a);
          } catch (err) {
            error(err);
          }
        });

        success({});
      } else {

        var consumer;
        do {
          consumer = avar.consumers.shift();
          try {
            consumer.success(a);
          } catch (err) {
            error(err);
            return;
          }
        } while (consumer.peek === true);

        success({});
      }

      return nonCanceler;
    };
  };

  exports._killVar = function (nonCanceler, avar, e) {
    return function (success, error) {
      if (avar.error !== undefined) {
        error(avar.error);
      } else {
        var errors = [];

        avar.error = e;

        while (avar.consumers.length > 0) {
          var consumer = avar.consumers.shift();

          try {
            consumer.error(e);
          } catch (err) {
            errors.push(err);
          }
        }

        if (errors.length > 0) error(errors[0]);
        else success({});
      }

      return nonCanceler;
    };
  };
})(PS["Control.Monad.Aff.Internal"] = PS["Control.Monad.Aff.Internal"] || {});
(function(exports) {
    "use strict";

  exports.throwException = function (e) {
    return function () {
      throw e;
    };
  };
})(PS["Control.Monad.Eff.Exception"] = PS["Control.Monad.Eff.Exception"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var $foreign = PS["Control.Monad.Eff.Exception"];
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Either = PS["Data.Either"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Show = PS["Data.Show"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Control_Applicative = PS["Control.Applicative"];
  var Data_Functor = PS["Data.Functor"];
  exports["throwException"] = $foreign.throwException;
})(PS["Control.Monad.Eff.Exception"] = PS["Control.Monad.Eff.Exception"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var $foreign = PS["Control.Monad.Aff.Internal"];
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff_Exception = PS["Control.Monad.Eff.Exception"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  exports["_killVar"] = $foreign._killVar;
  exports["_makeVar"] = $foreign._makeVar;
  exports["_putVar"] = $foreign._putVar;
  exports["_takeVar"] = $foreign._takeVar;
})(PS["Control.Monad.Aff.Internal"] = PS["Control.Monad.Aff.Internal"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var $foreign = PS["Control.Monad.Aff"];
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Monad_Aff_Internal = PS["Control.Monad.Aff.Internal"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Class = PS["Control.Monad.Eff.Class"];
  var Control_Monad_Eff_Exception = PS["Control.Monad.Eff.Exception"];
  var Control_Monad_Error_Class = PS["Control.Monad.Error.Class"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_Parallel = PS["Control.Parallel"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Either = PS["Data.Either"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Control_Apply = PS["Control.Apply"];
  var Data_Functor = PS["Data.Functor"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Data_Function = PS["Data.Function"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Semiring = PS["Data.Semiring"];
  var Control_Parallel_Class = PS["Control.Parallel.Class"];
  var Data_Unit = PS["Data.Unit"];        
  var ParAff = function (x) {
      return x;
  };
  var Canceler = function (x) {
      return x;
  };
  var runAff = function (ex) {
      return function (f) {
          return function (aff) {
              return $foreign._runAff(ex, f, aff);
          };
      };
  };         
  var makeAff$prime = function (h) {
      return $foreign._makeAff(h);
  };
  var functorAff = new Data_Functor.Functor(function (f) {
      return function (fa) {
          return $foreign._fmap(f, fa);
      };
  });
  var functorParAff = functorAff;
  var fromAVBox = Unsafe_Coerce.unsafeCoerce;
  var cancel = function (v) {
      return v;
  };
  var launchAff = (function () {
      var lowerEx = Data_Functor.map(Control_Monad_Eff.functorEff)(function ($47) {
          return Canceler(Data_Functor.map(Data_Functor.functorFn)($foreign._unsafeInterleaveAff)(cancel($47)));
      });
      return function ($48) {
          return lowerEx(runAff(Control_Monad_Eff_Exception.throwException)(Data_Function["const"](Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(Data_Unit.unit)))($foreign._unsafeInterleaveAff($48)));
      };
  })();
  var attempt = function (aff) {
      return $foreign._attempt(Data_Either.Left.create, Data_Either.Right.create, aff);
  };
  var applyAff = new Control_Apply.Apply(function () {
      return functorAff;
  }, function (ff) {
      return function (fa) {
          return $foreign._bind(alwaysCanceler, ff, function (f) {
              return Data_Functor.map(functorAff)(f)(fa);
          });
      };
  });
  var applicativeAff = new Control_Applicative.Applicative(function () {
      return applyAff;
  }, function (v) {
      return $foreign._pure(nonCanceler, v);
  });
  var nonCanceler = Data_Function["const"](Control_Applicative.pure(applicativeAff)(false));
  var alwaysCanceler = Data_Function["const"](Control_Applicative.pure(applicativeAff)(true));
  var cancelWith = function (aff) {
      return function (c) {
          return $foreign._cancelWith(nonCanceler, aff, c);
      };
  };
  var forkAff = function (aff) {
      return $foreign._forkAff(nonCanceler, aff);
  };
  var killVar = function (q) {
      return function (e) {
          return fromAVBox(Control_Monad_Aff_Internal._killVar(nonCanceler, q, e));
      };
  };
  var makeAff = function (h) {
      return makeAff$prime(function (e) {
          return function (a) {
              return Data_Functor.map(Control_Monad_Eff.functorEff)(Data_Function["const"](nonCanceler))(h(e)(a));
          };
      });
  };
  var makeVar = fromAVBox(Control_Monad_Aff_Internal._makeVar(nonCanceler));
  var putVar = function (q) {
      return function (a) {
          return fromAVBox(Control_Monad_Aff_Internal._putVar(nonCanceler, q, a));
      };
  };
  var takeVar = function (q) {
      return fromAVBox(Control_Monad_Aff_Internal._takeVar(nonCanceler, q));
  };
  var semigroupCanceler = new Data_Semigroup.Semigroup(function (v) {
      return function (v1) {
          return function (e) {
              return Control_Apply.apply(applyAff)(Data_Functor.map(functorAff)(Data_HeytingAlgebra.disj(Data_HeytingAlgebra.heytingAlgebraBoolean))(v(e)))(v1(e));
          };
      };
  });                                                                        
  var bindAff = new Control_Bind.Bind(function () {
      return applyAff;
  }, function (fa) {
      return function (f) {
          return $foreign._bind(alwaysCanceler, fa, f);
      };
  });
  var applyParAff = new Control_Apply.Apply(function () {
      return functorParAff;
  }, function (v) {
      return function (v1) {
          var putOrKill = function (v2) {
              return Data_Either.either(killVar(v2))(putVar(v2));
          };
          return Control_Bind.bind(bindAff)(makeVar)(function (v2) {
              return Control_Bind.bind(bindAff)(makeVar)(function (v3) {
                  return Control_Bind.bind(bindAff)(forkAff(Control_Bind.bindFlipped(bindAff)(putOrKill(v2))(attempt(v))))(function (v4) {
                      return Control_Bind.bind(bindAff)(forkAff(Control_Bind.bindFlipped(bindAff)(putOrKill(v3))(attempt(v1))))(function (v5) {
                          return cancelWith(Control_Apply.apply(applyAff)(takeVar(v2))(takeVar(v3)))(Data_Semigroup.append(semigroupCanceler)(v4)(v5));
                      });
                  });
              });
          });
      };
  });
  var applicativeParAff = new Control_Applicative.Applicative(function () {
      return applyParAff;
  }, function ($49) {
      return ParAff(Control_Applicative.pure(applicativeAff)($49));
  });
  var monadAff = new Control_Monad.Monad(function () {
      return applicativeAff;
  }, function () {
      return bindAff;
  });
  var monadEffAff = new Control_Monad_Eff_Class.MonadEff(function () {
      return monadAff;
  }, function (eff) {
      return $foreign._liftEff(nonCanceler, eff);
  });
  var monadRecAff = new Control_Monad_Rec_Class.MonadRec(function () {
      return monadAff;
  }, function (f) {
      return function (a) {
          var isLoop = function (v) {
              if (v instanceof Control_Monad_Rec_Class.Loop) {
                  return true;
              };
              return false;
          };
          return $foreign._tailRecM(isLoop, f, a);
      };
  });
  var parallelParAff = new Control_Parallel_Class.Parallel(function () {
      return applicativeParAff;
  }, function () {
      return monadAff;
  }, ParAff, function (v) {
      return v;
  });
  exports["Canceler"] = Canceler;
  exports["ParAff"] = ParAff;
  exports["attempt"] = attempt;
  exports["cancel"] = cancel;
  exports["cancelWith"] = cancelWith;
  exports["forkAff"] = forkAff;
  exports["launchAff"] = launchAff;
  exports["makeAff"] = makeAff;
  exports["nonCanceler"] = nonCanceler;
  exports["runAff"] = runAff;
  exports["functorAff"] = functorAff;
  exports["applyAff"] = applyAff;
  exports["applicativeAff"] = applicativeAff;
  exports["bindAff"] = bindAff;
  exports["monadAff"] = monadAff;
  exports["monadEffAff"] = monadEffAff;
  exports["monadRecAff"] = monadRecAff;
  exports["semigroupCanceler"] = semigroupCanceler;
  exports["functorParAff"] = functorParAff;
  exports["applyParAff"] = applyParAff;
  exports["applicativeParAff"] = applicativeParAff;
  exports["parallelParAff"] = parallelParAff;
})(PS["Control.Monad.Aff"] = PS["Control.Monad.Aff"] || {});
(function(exports) {
    "use strict";

  exports.now = function () {
    return Date.now();
  };
})(PS["Control.Monad.Eff.Now"] = PS["Control.Monad.Eff.Now"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Generic = PS["Data.Generic"];
  var Data_Newtype = PS["Data.Newtype"];
  var Control_Apply = PS["Control.Apply"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Show = PS["Data.Show"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Control_Category = PS["Control.Category"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];        
  var Seconds = function (x) {
      return x;
  };
  var Milliseconds = function (x) {
      return x;
  };
  var Duration = function (fromDuration, toDuration) {
      this.fromDuration = fromDuration;
      this.toDuration = toDuration;
  };
  var toDuration = function (dict) {
      return dict.toDuration;
  };                                     
  var ringMilliseconds = Data_Ring.ringNumber;
  var newtypeSeconds = new Data_Newtype.Newtype(function (n) {
      return n;
  }, Seconds);
  var newtypeMilliseconds = new Data_Newtype.Newtype(function (n) {
      return n;
  }, Milliseconds);
  var fromDuration = function (dict) {
      return dict.fromDuration;
  };                            
  var durationSeconds = new Duration(Data_Newtype.over(newtypeSeconds)(newtypeMilliseconds)(Seconds)(function (v) {
      return v * 1000.0;
  }), Data_Newtype.over(newtypeMilliseconds)(newtypeSeconds)(Milliseconds)(function (v) {
      return v / 1000.0;
  }));
  var durationMilliseconds = new Duration(Control_Category.id(Control_Category.categoryFn), Control_Category.id(Control_Category.categoryFn));
  var convertDuration = function (dictDuration) {
      return function (dictDuration1) {
          return function ($80) {
              return toDuration(dictDuration1)(fromDuration(dictDuration)($80));
          };
      };
  };
  exports["Milliseconds"] = Milliseconds;
  exports["Seconds"] = Seconds;
  exports["Duration"] = Duration;
  exports["convertDuration"] = convertDuration;
  exports["fromDuration"] = fromDuration;
  exports["toDuration"] = toDuration;
  exports["newtypeMilliseconds"] = newtypeMilliseconds;
  exports["ringMilliseconds"] = ringMilliseconds;
  exports["newtypeSeconds"] = newtypeSeconds;
  exports["durationMilliseconds"] = durationMilliseconds;
  exports["durationSeconds"] = durationSeconds;
})(PS["Data.Time.Duration"] = PS["Data.Time.Duration"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var otherwise = true;
  exports["otherwise"] = otherwise;
})(PS["Data.Boolean"] = PS["Data.Boolean"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var $foreign = PS["Data.DateTime.Instant"];
  var Prelude = PS["Prelude"];
  var Data_DateTime = PS["Data.DateTime"];
  var Data_Enum = PS["Data.Enum"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Data_Generic = PS["Data.Generic"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Time_Duration = PS["Data.Time.Duration"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Ord = PS["Data.Ord"];
  var Control_Apply = PS["Control.Apply"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Show = PS["Data.Show"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Date = PS["Data.Date"];
  var Data_Date_Component = PS["Data.Date.Component"];
  var Data_Time = PS["Data.Time"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Time_Component = PS["Data.Time.Component"];
  var unInstant = function (v) {
      return v;
  };
  exports["unInstant"] = unInstant;
})(PS["Data.DateTime.Instant"] = PS["Data.DateTime.Instant"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var $foreign = PS["Control.Monad.Eff.Now"];
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_DateTime = PS["Data.DateTime"];
  var Data_DateTime_Instant = PS["Data.DateTime.Instant"];
  var Data_DateTime_Locale = PS["Data.DateTime.Locale"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Time_Duration = PS["Data.Time.Duration"];
  var Data_Functor = PS["Data.Functor"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  exports["now"] = $foreign.now;
})(PS["Control.Monad.Eff.Now"] = PS["Control.Monad.Eff.Now"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  exports.setInterval = function (ms) {
    return function (fn) {
      return function () {
        return setInterval(fn, ms);
      };
    };
  };
})(PS["Control.Monad.Eff.Timer"] = PS["Control.Monad.Eff.Timer"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var $foreign = PS["Control.Monad.Eff.Timer"];
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Ord = PS["Data.Ord"];
  exports["setInterval"] = $foreign.setInterval;
})(PS["Control.Monad.Eff.Timer"] = PS["Control.Monad.Eff.Timer"] || {});
(function(exports) {
  /* global window */
  "use strict";

  exports.window = function () {
    return window;
  };
})(PS["DOM.HTML"] = PS["DOM.HTML"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var $foreign = PS["DOM.HTML.Types"];
  var Prelude = PS["Prelude"];
  var Control_Monad_Except_Trans = PS["Control.Monad.Except.Trans"];
  var Data_Either = PS["Data.Either"];
  var Data_Foreign = PS["Data.Foreign"];
  var Data_Foreign_Class = PS["Data.Foreign.Class"];
  var DOM_Event_Types = PS["DOM.Event.Types"];
  var DOM_Node_Types = PS["DOM.Node.Types"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Identity = PS["Data.Identity"];
  var Control_Applicative = PS["Control.Applicative"];
  var Data_List_Types = PS["Data.List.Types"];          
  var htmlDocumentToParentNode = Unsafe_Coerce.unsafeCoerce;
  exports["htmlDocumentToParentNode"] = htmlDocumentToParentNode;
})(PS["DOM.HTML.Types"] = PS["DOM.HTML.Types"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var $foreign = PS["DOM.HTML"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var DOM = PS["DOM"];
  var DOM_HTML_Types = PS["DOM.HTML.Types"];
  exports["window"] = $foreign.window;
})(PS["DOM.HTML"] = PS["DOM.HTML"] || {});
(function(exports) {
    "use strict";

  exports.document = function (window) {
    return function () {
      return window.document;
    };
  };
})(PS["DOM.HTML.Window"] = PS["DOM.HTML.Window"] || {});
(function(exports) {
    "use strict";        

  exports.nullable = function (a, r, f) {
    return a == null ? r : f(a);
  };
})(PS["Data.Nullable"] = PS["Data.Nullable"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var $foreign = PS["Data.Nullable"];
  var Prelude = PS["Prelude"];
  var Data_Function = PS["Data.Function"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Show = PS["Data.Show"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Ord = PS["Data.Ord"];                                        
  var toMaybe = function (n) {
      return $foreign.nullable(n, Data_Maybe.Nothing.value, Data_Maybe.Just.create);
  };
  exports["toMaybe"] = toMaybe;
})(PS["Data.Nullable"] = PS["Data.Nullable"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var $foreign = PS["DOM.HTML.Window"];
  var Prelude = PS["Prelude"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Nullable = PS["Data.Nullable"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var DOM = PS["DOM"];
  var DOM_HTML_Types = PS["DOM.HTML.Types"];
  var Data_Functor = PS["Data.Functor"];
  exports["document"] = $foreign.document;
})(PS["DOM.HTML.Window"] = PS["DOM.HTML.Window"] || {});
(function(exports) {
    "use strict";                                             

  exports.querySelector = function (selector) {
    return function (node) {
      return function () {
        return node.querySelector(selector);
      };
    };
  };
})(PS["DOM.Node.ParentNode"] = PS["DOM.Node.ParentNode"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var $foreign = PS["DOM.Node.ParentNode"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Nullable = PS["Data.Nullable"];
  var DOM = PS["DOM"];
  var DOM_Node_Types = PS["DOM.Node.Types"];
  exports["querySelector"] = $foreign.querySelector;
})(PS["DOM.Node.ParentNode"] = PS["DOM.Node.ParentNode"] || {});
(function(exports) {

  exports.runEffFn4 = function runEffFn4(fn) {
    return function(a) {
      return function(b) {
        return function(c) {
          return function(d) {
            return function() {
              return fn(a, b, c, d);
            };
          };
        };
      };
    };
  };
})(PS["Data.Function.Eff"] = PS["Data.Function.Eff"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var $foreign = PS["Data.Function.Eff"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  exports["runEffFn4"] = $foreign.runEffFn4;
})(PS["Data.Function.Eff"] = PS["Data.Function.Eff"] || {});
(function(exports) {
    "use strict";

  // module Data.Int

  exports.fromNumberImpl = function (just) {
    return function (nothing) {
      return function (n) {
        /* jshint bitwise: false */
        return (n | 0) === n ? just(n) : nothing;
      };
    };
  };

  exports.toNumber = function (n) {
    return n;
  };
})(PS["Data.Int"] = PS["Data.Int"] || {});
(function(exports) {
    "use strict";        

  exports.floor = Math.floor;
})(PS["Math"] = PS["Math"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var $foreign = PS["Math"];
  exports["floor"] = $foreign.floor;
})(PS["Math"] = PS["Math"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var $foreign = PS["Data.Int"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_BooleanAlgebra = PS["Data.BooleanAlgebra"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Int_Bits = PS["Data.Int.Bits"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var $$Math = PS["Math"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var fromNumber = $foreign.fromNumberImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var unsafeClamp = function (x) {
      if (x >= $foreign.toNumber(Data_Bounded.top(Data_Bounded.boundedInt))) {
          return Data_Bounded.top(Data_Bounded.boundedInt);
      };
      if (x <= $foreign.toNumber(Data_Bounded.bottom(Data_Bounded.boundedInt))) {
          return Data_Bounded.bottom(Data_Bounded.boundedInt);
      };
      if (Data_Boolean.otherwise) {
          return Partial_Unsafe.unsafePartial(function (dictPartial) {
              return Data_Maybe.fromJust(dictPartial)(fromNumber(x));
          });
      };
      throw new Error("Failed pattern match at Data.Int line 65, column 1 - line 68, column 56: " + [ x.constructor.name ]);
  };
  var floor = function ($4) {
      return unsafeClamp($$Math.floor($4));
  };
  exports["floor"] = floor;
  exports["fromNumber"] = fromNumber;
})(PS["Data.Int"] = PS["Data.Int"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Either = PS["Data.Either"];
  var Data_Profunctor = PS["Data.Profunctor"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Control_Category = PS["Control.Category"];        
  var Choice = function (__superclass_Data$dotProfunctor$dotProfunctor_0, left, right) {
      this["__superclass_Data.Profunctor.Profunctor_0"] = __superclass_Data$dotProfunctor$dotProfunctor_0;
      this.left = left;
      this.right = right;
  };
  var right = function (dict) {
      return dict.right;
  };
  var left = function (dict) {
      return dict.left;
  };
  var choiceFn = new Choice(function () {
      return Data_Profunctor.profunctorFn;
  }, function (v) {
      return function (v1) {
          if (v1 instanceof Data_Either.Left) {
              return Data_Either.Left.create(v(v1.value0));
          };
          if (v1 instanceof Data_Either.Right) {
              return new Data_Either.Right(v1.value0);
          };
          throw new Error("Failed pattern match at Data.Profunctor.Choice line 33, column 3 - line 33, column 36: " + [ v.constructor.name, v1.constructor.name ]);
      };
  }, Data_Functor.map(Data_Either.functorEither));
  exports["Choice"] = Choice;
  exports["left"] = left;
  exports["right"] = right;
  exports["choiceFn"] = choiceFn;
})(PS["Data.Profunctor.Choice"] = PS["Data.Profunctor.Choice"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Profunctor = PS["Data.Profunctor"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Functor = PS["Data.Functor"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Control_Category = PS["Control.Category"];        
  var Strong = function (__superclass_Data$dotProfunctor$dotProfunctor_0, first, second) {
      this["__superclass_Data.Profunctor.Profunctor_0"] = __superclass_Data$dotProfunctor$dotProfunctor_0;
      this.first = first;
      this.second = second;
  };
  var strongFn = new Strong(function () {
      return Data_Profunctor.profunctorFn;
  }, function (a2b) {
      return function (v) {
          return new Data_Tuple.Tuple(a2b(v.value0), v.value1);
      };
  }, Data_Functor.map(Data_Tuple.functorTuple));
  var second = function (dict) {
      return dict.second;
  };
  var first = function (dict) {
      return dict.first;
  };
  exports["Strong"] = Strong;
  exports["first"] = first;
  exports["second"] = second;
  exports["strongFn"] = strongFn;
})(PS["Data.Profunctor.Strong"] = PS["Data.Profunctor.Strong"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Const = PS["Data.Const"];
  var Data_Either = PS["Data.Either"];
  var Data_Lens_Internal_Wander = PS["Data.Lens.Internal.Wander"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Profunctor = PS["Data.Profunctor"];
  var Data_Profunctor_Choice = PS["Data.Profunctor.Choice"];
  var Data_Profunctor_Cochoice = PS["Data.Profunctor.Cochoice"];
  var Data_Profunctor_Strong = PS["Data.Profunctor.Strong"];
  var Data_Tuple = PS["Data.Tuple"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Functor = PS["Data.Functor"];        
  var Forget = function (x) {
      return x;
  };
  var profunctorForget = new Data_Profunctor.Profunctor(function (f) {
      return function (v) {
          return function (v1) {
              return function ($25) {
                  return v1(f($25));
              };
          };
      };
  });
  var strongForget = new Data_Profunctor_Strong.Strong(function () {
      return profunctorForget;
  }, function (v) {
      return function ($26) {
          return v(Data_Tuple.fst($26));
      };
  }, function (v) {
      return function ($27) {
          return v(Data_Tuple.snd($27));
      };
  });
  var newtypeForget = new Data_Newtype.Newtype(function (n) {
      return n;
  }, Forget);
  var choiceForget = function (dictMonoid) {
      return new Data_Profunctor_Choice.Choice(function () {
          return profunctorForget;
      }, function (v) {
          return Data_Either.either(v)(Data_Monoid.mempty(Data_Monoid.monoidFn(dictMonoid)));
      }, function (v) {
          return Data_Either.either(Data_Monoid.mempty(Data_Monoid.monoidFn(dictMonoid)))(v);
      });
  };
  exports["Forget"] = Forget;
  exports["newtypeForget"] = newtypeForget;
  exports["profunctorForget"] = profunctorForget;
  exports["choiceForget"] = choiceForget;
  exports["strongForget"] = strongForget;
})(PS["Data.Lens.Internal.Forget"] = PS["Data.Lens.Internal.Forget"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Either = PS["Data.Either"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Lens_Internal_Forget = PS["Data.Lens.Internal.Forget"];
  var Data_Lens_Types = PS["Data.Lens.Types"];
  var Data_List = PS["Data.List"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Maybe_Last = PS["Data.Maybe.Last"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Monoid_Additive = PS["Data.Monoid.Additive"];
  var Data_Monoid_Conj = PS["Data.Monoid.Conj"];
  var Data_Monoid_Disj = PS["Data.Monoid.Disj"];
  var Data_Monoid_Dual = PS["Data.Monoid.Dual"];
  var Data_Monoid_Endo = PS["Data.Monoid.Endo"];
  var Data_Monoid_Multiplicative = PS["Data.Monoid.Multiplicative"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Profunctor = PS["Data.Profunctor"];
  var Data_Profunctor_Choice = PS["Data.Profunctor.Choice"];
  var Data_Tuple = PS["Data.Tuple"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Function = PS["Data.Function"];
  var Data_Lens_Internal_Indexed = PS["Data.Lens.Internal.Indexed"];
  var Data_List_Types = PS["Data.List.Types"];
  var Control_Apply = PS["Control.Apply"];
  var Data_Functor = PS["Data.Functor"];
  var Control_Applicative = PS["Control.Applicative"];
  var Data_Unit = PS["Data.Unit"];
  var Control_Category = PS["Control.Category"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Eq = PS["Data.Eq"];
  var foldMapOf = Data_Newtype.under(Data_Lens_Internal_Forget.newtypeForget)(Data_Lens_Internal_Forget.newtypeForget)(Data_Lens_Internal_Forget.Forget);
  var preview = function (p) {
      return function ($62) {
          return Data_Newtype.unwrap(Data_Maybe_First.newtypeFirst)(foldMapOf(p)(function ($63) {
              return Data_Maybe_First.First(Data_Maybe.Just.create($63));
          })($62));
      };
  };
  exports["foldMapOf"] = foldMapOf;
  exports["preview"] = preview;
})(PS["Data.Lens.Fold"] = PS["Data.Lens.Fold"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Monad_State_Class = PS["Control.Monad.State.Class"];
  var Data_Lens_Internal_Forget = PS["Data.Lens.Internal.Forget"];
  var Data_Lens_Types = PS["Data.Lens.Types"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Tuple = PS["Data.Tuple"];
  var Control_Category = PS["Control.Category"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Function = PS["Data.Function"];
  var Data_Lens_Internal_Indexed = PS["Data.Lens.Internal.Indexed"];        
  var view = function (l) {
      return Data_Newtype.unwrap(Data_Lens_Internal_Forget.newtypeForget)(l(Control_Category.id(Control_Category.categoryFn)));
  };
  exports["view"] = view;
})(PS["Data.Lens.Getter"] = PS["Data.Lens.Getter"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Either = PS["Data.Either"];
  var Data_Profunctor = PS["Data.Profunctor"];
  var Data_Profunctor_Choice = PS["Data.Profunctor.Choice"];
  var Data_Functor = PS["Data.Functor"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];        
  var Market = (function () {
      function Market(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Market.create = function (value0) {
          return function (value1) {
              return new Market(value0, value1);
          };
      };
      return Market;
  })();
  var profunctorMarket = new Data_Profunctor.Profunctor(function (f) {
      return function (g) {
          return function (v) {
              return new Market(function ($19) {
                  return g(v.value0($19));
              }, function ($20) {
                  return Data_Bifunctor.lmap(Data_Either.bifunctorEither)(g)(v.value1(f($20)));
              });
          };
      };
  });
  var choiceMarket = new Data_Profunctor_Choice.Choice(function () {
      return profunctorMarket;
  }, function (v) {
      return new Market(function ($23) {
          return Data_Either.Left.create(v.value0($23));
      }, Data_Either.either(function ($24) {
          return Data_Bifunctor.lmap(Data_Either.bifunctorEither)(Data_Either.Left.create)(v.value1($24));
      })(function ($25) {
          return Data_Either.Left.create(Data_Either.Right.create($25));
      }));
  }, function (v) {
      return new Market(function ($26) {
          return Data_Either.Right.create(v.value0($26));
      }, Data_Either.either(function ($27) {
          return Data_Either.Left.create(Data_Either.Left.create($27));
      })(function ($28) {
          return Data_Bifunctor.lmap(Data_Either.bifunctorEither)(Data_Either.Right.create)(v.value1($28));
      }));
  });
  exports["Market"] = Market;
  exports["profunctorMarket"] = profunctorMarket;
  exports["choiceMarket"] = choiceMarket;
})(PS["Data.Lens.Internal.Market"] = PS["Data.Lens.Internal.Market"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var Data_Either = PS["Data.Either"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Profunctor = PS["Data.Profunctor"];
  var Data_Profunctor_Choice = PS["Data.Profunctor.Choice"];
  var Data_Profunctor_Costrong = PS["Data.Profunctor.Costrong"];
  var Data_Tuple = PS["Data.Tuple"];        
  var Tagged = function (x) {
      return x;
  };
  var taggedProfunctor = new Data_Profunctor.Profunctor(function (v) {
      return function (g) {
          return function (v1) {
              return g(v1);
          };
      };
  });
  var taggedChoice = new Data_Profunctor_Choice.Choice(function () {
      return taggedProfunctor;
  }, function (v) {
      return new Data_Either.Left(v);
  }, function (v) {
      return new Data_Either.Right(v);
  });
  var newtypeTagged = new Data_Newtype.Newtype(function (n) {
      return n;
  }, Tagged);
  exports["Tagged"] = Tagged;
  exports["newtypeTagged"] = newtypeTagged;
  exports["taggedProfunctor"] = taggedProfunctor;
  exports["taggedChoice"] = taggedChoice;
})(PS["Data.Lens.Internal.Tagged"] = PS["Data.Lens.Internal.Tagged"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Lens_Internal_Shop = PS["Data.Lens.Internal.Shop"];
  var Data_Lens_Types = PS["Data.Lens.Types"];
  var Data_Profunctor = PS["Data.Profunctor"];
  var Data_Profunctor_Strong = PS["Data.Profunctor.Strong"];
  var Data_Tuple = PS["Data.Tuple"];
  var Control_Category = PS["Control.Category"];
  var lens$prime = function (to) {
      return function (dictStrong) {
          return function (pab) {
              return Data_Profunctor.dimap(dictStrong["__superclass_Data.Profunctor.Profunctor_0"]())(to)(function (v) {
                  return v.value1(v.value0);
              })(Data_Profunctor_Strong.first(dictStrong)(pab));
          };
      };
  };
  var lens = function (get) {
      return function (set) {
          return function (dictStrong) {
              return lens$prime(function (s) {
                  return new Data_Tuple.Tuple(get(s), function (b) {
                      return set(s)(b);
                  });
              })(dictStrong);
          };
      };
  };
  exports["lens"] = lens;
})(PS["Data.Lens.Lens"] = PS["Data.Lens.Lens"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var Data_Lens_Lens = PS["Data.Lens.Lens"];
  var Data_Profunctor_Strong = PS["Data.Profunctor.Strong"];
  var Data_Tuple = PS["Data.Tuple"];        
  var _2 = function (dictStrong) {
      return Data_Profunctor_Strong.second(dictStrong);
  };
  var _1 = function (dictStrong) {
      return Data_Profunctor_Strong.first(dictStrong);
  };
  exports["_1"] = _1;
  exports["_2"] = _2;
})(PS["Data.Lens.Lens.Tuple"] = PS["Data.Lens.Lens.Tuple"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Data_Either = PS["Data.Either"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Lens_Types = PS["Data.Lens.Types"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Profunctor = PS["Data.Profunctor"];
  var Data_Profunctor_Choice = PS["Data.Profunctor.Choice"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Lens_Internal_Market = PS["Data.Lens.Internal.Market"];
  var Control_Category = PS["Control.Category"];
  var Data_Lens_Internal_Tagged = PS["Data.Lens.Internal.Tagged"];
  var Data_Function = PS["Data.Function"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Data_Eq = PS["Data.Eq"];        
  var withPrism = function (l) {
      return function (f) {
          var $10 = l(new Data_Lens_Internal_Market.Market(Control_Category.id(Control_Category.categoryFn), Data_Either.Right.create));
          return f($10.value0)($10.value1);
      };
  };
  var review = Data_Newtype.under(Data_Lens_Internal_Tagged.newtypeTagged)(Data_Lens_Internal_Tagged.newtypeTagged)(Data_Lens_Internal_Tagged.Tagged);
  var prism = function (to) {
      return function (fro) {
          return function (dictChoice) {
              return function (pab) {
                  return Data_Profunctor.dimap(dictChoice["__superclass_Data.Profunctor.Profunctor_0"]())(fro)(Data_Either.either(Control_Category.id(Control_Category.categoryFn))(Control_Category.id(Control_Category.categoryFn)))(Data_Profunctor_Choice.right(dictChoice)(Data_Profunctor.rmap(dictChoice["__superclass_Data.Profunctor.Profunctor_0"]())(to)(pab)));
              };
          };
      };
  };
  var prism$prime = function (to) {
      return function (fro) {
          return function (dictChoice) {
              return prism(to)(function (s) {
                  return Data_Maybe.maybe(new Data_Either.Left(s))(Data_Either.Right.create)(fro(s));
              })(dictChoice);
          };
      };
  };
  var nearly = function (x) {
      return function (f) {
          return function (dictChoice) {
              return prism$prime(Data_Function["const"](x))(function ($14) {
                  return Control_MonadZero.guard(Data_Maybe.monadZeroMaybe)(f($14));
              })(dictChoice);
          };
      };
  };
  var only = function (dictEq) {
      return function (x) {
          return function (dictChoice) {
              return nearly(x)(function (v) {
                  return Data_Eq.eq(dictEq)(v)(x);
              })(dictChoice);
          };
      };
  };
  var matching = function (l) {
      return withPrism(l)(function (v) {
          return function (f) {
              return f;
          };
      });
  };
  exports["matching"] = matching;
  exports["nearly"] = nearly;
  exports["only"] = only;
  exports["prism"] = prism;
  exports["review"] = review;
  exports["withPrism"] = withPrism;
})(PS["Data.Lens.Prism"] = PS["Data.Lens.Prism"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var Data_Either = PS["Data.Either"];
  var Data_Lens_Prism = PS["Data.Lens.Prism"];
  var Data_Profunctor_Choice = PS["Data.Profunctor.Choice"];        
  var _Right = function (dictChoice) {
      return Data_Profunctor_Choice.right(dictChoice);
  };
  var _Left = function (dictChoice) {
      return Data_Profunctor_Choice.left(dictChoice);
  };
  exports["_Left"] = _Left;
  exports["_Right"] = _Right;
})(PS["Data.Lens.Prism.Either"] = PS["Data.Lens.Prism.Either"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Monad_State_Class = PS["Control.Monad.State.Class"];
  var Data_Lens_Types = PS["Data.Lens.Types"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Function = PS["Data.Function"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Lens_Internal_Indexed = PS["Data.Lens.Internal.Indexed"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Semigroup = PS["Data.Semigroup"];        
  var over = function (l) {
      return l;
  };
  var set = function (l) {
      return function (b) {
          return over(l)(Data_Function["const"](b));
      };
  };
  exports["over"] = over;
  exports["set"] = set;
})(PS["Data.Lens.Setter"] = PS["Data.Lens.Setter"] || {});
(function(exports) {
    "use strict";

  exports.length = function (s) {
    return s.length;
  };

  exports.joinWith = function (s) {
    return function (xs) {
      return xs.join(s);
    };
  };
})(PS["Data.String"] = PS["Data.String"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var $foreign = PS["Data.String"];
  var Prelude = PS["Prelude"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_String_Unsafe = PS["Data.String.Unsafe"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Show = PS["Data.Show"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Function = PS["Data.Function"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  exports["joinWith"] = $foreign.joinWith;
  exports["length"] = $foreign.length;
})(PS["Data.String"] = PS["Data.String"] || {});
(function(exports) {
  /* global exports */
  "use strict";
  var React =require("react"); 

  function getProps(this_) {
    return function(){
      return this_.props;
    };
  }
  exports.getProps = getProps;

  function getRefs(this_) {
    return function(){
      return this_.refs;
    };
  }                         

  function childrenToArray(children) {
    var result = [];

    React.Children.forEach(children, function(child){
      result.push(child);
    });

    return result;
  }                                         

  function getChildren(this_) {
    return function(){
      var children = this_.props.children;

      var result = childrenToArray(children);

      return result;
    };
  }
  exports.getChildren = getChildren;

  function writeState(this_) {
    return function(state){
      return function(){
        this_.setState({
          state: state
        });
        return state;
      };
    };
  }                               

  function writeStateWithCallback(this_, cb) {
    return function(state){
      return function(cb){
        return function() {
          this_.setState({
            state: state
          }, cb);
          return state;
        };
      };
    };
  }
  exports.writeStateWithCallback = writeStateWithCallback;

  function readState(this_) {
    return function(){
      return this_.state.state;
    };
  }
  exports.readState = readState;

  function transformState(this_){
    return function(update){
      return function(){
        this_.setState(function(old, props){
          return {state: update(old.state)};
        });
      };
    };
  }                                       

  function createClass(spec) {
    var result = {
      displayName: spec.displayName,
      render: function(){
        return spec.render(this)();
      },
      getInitialState: function(){
        return {
          state: spec.getInitialState(this)()
        };
      },
      componentWillMount: function(){
        return spec.componentWillMount(this)();
      },
      componentDidMount: function(){
        return spec.componentDidMount(this)();
      },
      componentWillReceiveProps: function(nextProps){
        return spec.componentWillReceiveProps(this)(nextProps)();
      },
      shouldComponentUpdate: function(nextProps, nextState){
        return spec.shouldComponentUpdate(this)(nextProps)(nextState.state)();
      },
      componentWillUpdate: function(nextProps, nextState){
        return spec.componentWillUpdate(this)(nextProps)(nextState.state)();
      },
      componentDidUpdate: function(prevProps, prevState){
        return spec.componentDidUpdate(this)(prevProps)(prevState.state)();
      },
      componentWillUnmount: function(){
        return spec.componentWillUnmount(this)();
      }
    };

    return React.createClass(result);
  }
  exports.createClass = createClass;

  function handle(f) {
    return function(e){
      return f(e)();
    };
  };
  exports.handle = handle;

  function createElement(class_) {
    return function(props){
      return function(children){
        return React.createElement.apply(React, [class_, props].concat(children));
      };
    };
  }
  exports.createElement = createElement;
  exports.createElementTagName = createElement;

  function createElementDynamic(class_) {
    return function(props) {
      return function(children){
        return React.createElement(class_, props, children);
      };
    };
  };
  exports.createElementDynamic = createElementDynamic;
  exports.createElementTagNameDynamic = createElementDynamic;

  function createFactory(class_) {
    return React.createFactory(class_);
  }
  exports.createFactory = createFactory;

  function preventDefault(event) {
    return function() { return event.preventDefault();}
  };                                      

  function stopPropagation(event) {
    return function() { return event.stopPropagation();}
  };
})(PS["React"] = PS["React"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var $foreign = PS["React"];
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];
  var Control_Applicative = PS["Control.Applicative"];
  var Data_Unit = PS["Data.Unit"];        
  var spec$prime = function (getInitialState) {
      return function (renderFn) {
          return {
              render: renderFn, 
              displayName: "", 
              getInitialState: getInitialState, 
              componentWillMount: function (v) {
                  return Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(Data_Unit.unit);
              }, 
              componentDidMount: function (v) {
                  return Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(Data_Unit.unit);
              }, 
              componentWillReceiveProps: function (v) {
                  return function (v1) {
                      return Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(Data_Unit.unit);
                  };
              }, 
              shouldComponentUpdate: function (v) {
                  return function (v1) {
                      return function (v2) {
                          return Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(true);
                      };
                  };
              }, 
              componentWillUpdate: function (v) {
                  return function (v1) {
                      return function (v2) {
                          return Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(Data_Unit.unit);
                      };
                  };
              }, 
              componentDidUpdate: function (v) {
                  return function (v1) {
                      return function (v2) {
                          return Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(Data_Unit.unit);
                      };
                  };
              }, 
              componentWillUnmount: function (v) {
                  return Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(Data_Unit.unit);
              }
          };
      };
  };
  var spec = function (state) {
      return spec$prime(function (v) {
          return Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(state);
      });
  };
  exports["spec"] = spec;
  exports["createClass"] = $foreign.createClass;
  exports["createElementTagName"] = $foreign.createElementTagName;
  exports["createElementTagNameDynamic"] = $foreign.createElementTagNameDynamic;
  exports["createFactory"] = $foreign.createFactory;
  exports["getChildren"] = $foreign.getChildren;
  exports["getProps"] = $foreign.getProps;
  exports["handle"] = $foreign.handle;
  exports["readState"] = $foreign.readState;
  exports["writeStateWithCallback"] = $foreign.writeStateWithCallback;
})(PS["React"] = PS["React"] || {});
(function(exports) {
  /* global exports */
  "use strict";
  var React =require("react"); 

  function unsafeMkProps(key) {
    return function(value){
      var result = {};
      result[key] = value;
      return result;
    };
  }
  exports.unsafeMkProps = unsafeMkProps;

  function unsafeUnfoldProps(key) {
    return function(value){
      var result = {};
      var props = {};
      props[key] = result;

      for (var subprop in value) {
        if (value.hasOwnProperty(subprop)) {
          result[subprop] = value[subprop];
        }
      }

      return props;
    };
  }                                             

  function unsafePrefixProps(prefix) {
    return function(value){
      var result = {};

      for (var prop in value) {
        if (value.hasOwnProperty(prop)) {
          result[prefix + prop] = value[prop];
        }
      }

      return result;
    };
  }                                             

  function unsafeFromPropsArray(props) {
    var result = {};

    for (var i = 0, len = props.length; i < len; i++) {
      var prop = props[i];

      for (var key in prop) {
        if (prop.hasOwnProperty(key)) {
          result[key] = prop[key];
        }
      }
    }

    return result;
  };
  exports.unsafeFromPropsArray = unsafeFromPropsArray;
})(PS["React.DOM.Props"] = PS["React.DOM.Props"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var $foreign = PS["React.DOM.Props"];
  var React = PS["React"];
  var onClick = function (f) {
      return $foreign.unsafeMkProps("onClick")(React.handle(f));
  };                                                
  var href = $foreign.unsafeMkProps("href");      
  var className = $foreign.unsafeMkProps("className");
  exports["className"] = className;
  exports["href"] = href;
  exports["onClick"] = onClick;
  exports["unsafeFromPropsArray"] = $foreign.unsafeFromPropsArray;
})(PS["React.DOM.Props"] = PS["React.DOM.Props"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var React = PS["React"];
  var React_DOM_Props = PS["React.DOM.Props"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];
  var text = Unsafe_Coerce.unsafeCoerce;
  var mkDOM = function (dynamic) {
      return function (tag) {
          return function (props) {
              var createElement = (function () {
                  if (!dynamic) {
                      return React.createElementTagName;
                  };
                  if (dynamic) {
                      return React.createElementTagNameDynamic;
                  };
                  throw new Error("Failed pattern match at React.DOM line 15, column 5 - line 17, column 55: " + [ dynamic.constructor.name ]);
              })();
              return createElement(tag)(React_DOM_Props.unsafeFromPropsArray(props));
          };
      };
  };
  var nav = mkDOM(false)("nav");
  var nav$prime = nav([  ]);      
  var p = mkDOM(false)("p");
  var p$prime = p([  ]);            
  var pre = mkDOM(false)("pre");
  var pre$prime = pre([  ]);
  var ul = mkDOM(false)("ul");
  var ul$prime = ul([  ]);        
  var li = mkDOM(false)("li");
  var li$prime = li([  ]);
  var h1 = mkDOM(false)("h1");
  var h1$prime = h1([  ]);
  var div = mkDOM(false)("div");
  var div$prime = div([  ]);
  var code = mkDOM(false)("code");
  var code$prime = code([  ]);    
  var button = mkDOM(false)("button");
  var a = mkDOM(false)("a");
  exports["a"] = a;
  exports["button"] = button;
  exports["code"] = code;
  exports["code'"] = code$prime;
  exports["div"] = div;
  exports["div'"] = div$prime;
  exports["h1"] = h1;
  exports["h1'"] = h1$prime;
  exports["li"] = li;
  exports["li'"] = li$prime;
  exports["mkDOM"] = mkDOM;
  exports["nav"] = nav;
  exports["nav'"] = nav$prime;
  exports["p"] = p;
  exports["p'"] = p$prime;
  exports["pre"] = pre;
  exports["pre'"] = pre$prime;
  exports["text"] = text;
  exports["ul"] = ul;
  exports["ul'"] = ul$prime;
})(PS["React.DOM"] = PS["React.DOM"] || {});
(function(exports) {
  /* global exports */
  "use strict";
  var ReactDOM =require("react-dom");
  var ReactDOMServer =require("react-dom/server"); 

  exports.renderImpl = function (nothing, just, element, container) {
    var result = ReactDOM.render(element, container);
    return result === null ? nothing : just(result);
  };
})(PS["ReactDOM"] = PS["ReactDOM"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var $foreign = PS["ReactDOM"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var DOM = PS["DOM"];
  var DOM_Node_Types = PS["DOM.Node.Types"];
  var Data_Function_Eff = PS["Data.Function.Eff"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Data_Maybe = PS["Data.Maybe"];
  var React = PS["React"];                                                                     
  var render = Data_Function_Eff.runEffFn4($foreign.renderImpl)(Data_Maybe.Nothing.value)(Data_Maybe.Just.create);
  exports["render"] = render;
})(PS["ReactDOM"] = PS["ReactDOM"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Coroutine = PS["Control.Coroutine"];
  var Control_Monad_Aff = PS["Control.Monad.Aff"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Unsafe = PS["Control.Monad.Eff.Unsafe"];
  var Control_Monad_Eff_Class = PS["Control.Monad.Eff.Class"];
  var Control_Monad_Free_Trans = PS["Control.Monad.Free.Trans"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Monad_Trans_Class = PS["Control.Monad.Trans.Class"];
  var Data_Either = PS["Data.Either"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Lens = PS["Data.Lens"];
  var Data_List = PS["Data.List"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Tuple = PS["Data.Tuple"];
  var React = PS["React"];
  var React_DOM = PS["React.DOM"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Applicative = PS["Control.Applicative"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Function = PS["Data.Function"];
  var Data_Lens_Prism = PS["Data.Lens.Prism"];
  var Data_Lens_Internal_Market = PS["Data.Lens.Internal.Market"];
  var Data_Lens_Fold = PS["Data.Lens.Fold"];
  var Data_Lens_Internal_Forget = PS["Data.Lens.Internal.Forget"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Lens_Setter = PS["Data.Lens.Setter"];
  var Data_Profunctor_Choice = PS["Data.Profunctor.Choice"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Semiring = PS["Data.Semiring"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Lens_Internal_Tagged = PS["Data.Lens.Internal.Tagged"];
  var Data_Lens_Getter = PS["Data.Lens.Getter"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Profunctor_Strong = PS["Data.Profunctor.Strong"];
  var Control_Category = PS["Control.Category"];
  var Control_Apply = PS["Control.Apply"];
  var Data_Lens_Lens = PS["Data.Lens.Lens"];
  var writeState = function (st) {
      return Control_Coroutine.cotransform(Control_Monad_Aff.monadAff)(Data_Function["const"](st));
  };
  var split = function (prism) {
      return function (v) {
          var render = function (k) {
              return function (p) {
                  return function (st) {
                      return function (children) {
                          var $44 = Data_Lens_Prism.matching(prism(Data_Lens_Internal_Market.choiceMarket))(st);
                          if ($44 instanceof Data_Either.Left) {
                              return [  ];
                          };
                          if ($44 instanceof Data_Either.Right) {
                              return v.render(k)(p)($44.value0)(children);
                          };
                          throw new Error("Failed pattern match at Thermite line 320, column 7 - line 322, column 50: " + [ $44.constructor.name ]);
                      };
                  };
              };
          };
          var performAction = function (a) {
              return function (p) {
                  return function (st) {
                      var $47 = Data_Lens_Prism.matching(prism(Data_Lens_Internal_Market.choiceMarket))(st);
                      if ($47 instanceof Data_Either.Left) {
                          return Control_Applicative.pure(Control_Monad_Free_Trans.applicativeFreeT(Control_Coroutine.functorCoTransform)(Control_Monad_Aff.monadAff))(Data_Unit.unit);
                      };
                      if ($47 instanceof Data_Either.Right) {
                          return Control_Coroutine.transformCoTransformR(Control_Monad_Aff.monadRecAff)(Control_Monad_Aff.parallelParAff)(Control_Coroutine.transformCoTransformL(Control_Monad_Aff.monadRecAff)(Control_Monad_Aff.parallelParAff)(Control_Monad_Rec_Class.forever(Control_Monad_Free_Trans.monadRecFreeT(Control_Coroutine.functorTransform)(Control_Monad_Aff.monadAff))(Control_Coroutine.transform(Control_Monad_Aff.monadAff)(function (v1) {
                              return Control_Bind.bind(Data_Maybe.bindMaybe)(v1)(Data_Lens_Fold.preview(prism(Data_Lens_Internal_Forget.choiceForget(Data_Maybe_First.monoidFirst))));
                          })))(v.performAction(a)(p)($47.value0)))(Control_Monad_Rec_Class.forever(Control_Monad_Free_Trans.monadRecFreeT(Control_Coroutine.functorTransform)(Control_Monad_Aff.monadAff))(Control_Coroutine.transform(Control_Monad_Aff.monadAff)(Data_Lens_Setter.over(prism(Data_Profunctor_Choice.choiceFn)))));
                      };
                      throw new Error("Failed pattern match at Thermite line 312, column 7 - line 316, column 78: " + [ $47.constructor.name ]);
                  };
              };
          };
          return {
              performAction: performAction, 
              render: render
          };
      };
  };
  var simpleSpec = function (performAction) {
      return function (render) {
          return {
              performAction: performAction, 
              render: render
          };
      };
  };
  var semigroupSpec = new Data_Semigroup.Semigroup(function (v) {
      return function (v1) {
          return {
              performAction: function (a) {
                  return function (p) {
                      return function (s) {
                          return Control_Bind.bind(Control_Monad_Free_Trans.bindFreeT(Control_Coroutine.functorCoTransform)(Control_Monad_Aff.monadAff))(v.performAction(a)(p)(s))(function () {
                              return v1.performAction(a)(p)(s);
                          });
                      };
                  };
              }, 
              render: function (k) {
                  return function (p) {
                      return function (s) {
                          return Data_Semigroup.append(Data_Semigroup.semigroupFn(Data_Semigroup.semigroupArray))(v.render(k)(p)(s))(v1.render(k)(p)(s));
                      };
                  };
              }
          };
      };
  });
  var monoidSpec = new Data_Monoid.Monoid(function () {
      return semigroupSpec;
  }, simpleSpec(function (v) {
      return function (v1) {
          return function (v2) {
              return Control_Applicative.pure(Control_Monad_Free_Trans.applicativeFreeT(Control_Coroutine.functorCoTransform)(Control_Monad_Aff.monadAff))(Data_Unit.unit);
          };
      };
  })(function (v) {
      return function (v1) {
          return function (v2) {
              return function (v3) {
                  return [  ];
              };
          };
      };
  }));
  var modifyState = Control_Coroutine.cotransform(Control_Monad_Aff.monadAff);
  var focus = function (lens) {
      return function (prism) {
          return function (v) {
              var render = function (k) {
                  return function (p) {
                      return function (st) {
                          return v.render(function ($95) {
                              return k(Data_Lens_Prism.review(prism(Data_Lens_Internal_Tagged.taggedChoice))($95));
                          })(p)(Data_Lens_Getter.view(lens(Data_Lens_Internal_Forget.strongForget))(st));
                      };
                  };
              };
              var performAction = function (a) {
                  return function (p) {
                      return function (st) {
                          var $74 = Data_Lens_Prism.matching(prism(Data_Lens_Internal_Market.choiceMarket))(a);
                          if ($74 instanceof Data_Either.Left) {
                              return Control_Applicative.pure(Control_Monad_Free_Trans.applicativeFreeT(Control_Coroutine.functorCoTransform)(Control_Monad_Aff.monadAff))(Data_Unit.unit);
                          };
                          if ($74 instanceof Data_Either.Right) {
                              return Control_Coroutine.transformCoTransformR(Control_Monad_Aff.monadRecAff)(Control_Monad_Aff.parallelParAff)(Control_Coroutine.transformCoTransformL(Control_Monad_Aff.monadRecAff)(Control_Monad_Aff.parallelParAff)(Control_Monad_Rec_Class.forever(Control_Monad_Free_Trans.monadRecFreeT(Control_Coroutine.functorTransform)(Control_Monad_Aff.monadAff))(Control_Coroutine.transform(Control_Monad_Aff.monadAff)(Data_Functor.map(Data_Maybe.functorMaybe)(Data_Lens_Getter.view(lens(Data_Lens_Internal_Forget.strongForget))))))(v.performAction($74.value0)(p)(Data_Lens_Getter.view(lens(Data_Lens_Internal_Forget.strongForget))(st))))(Control_Monad_Rec_Class.forever(Control_Monad_Free_Trans.monadRecFreeT(Control_Coroutine.functorTransform)(Control_Monad_Aff.monadAff))(Control_Coroutine.transform(Control_Monad_Aff.monadAff)(Data_Lens_Setter.over(lens(Data_Profunctor_Strong.strongFn)))));
                          };
                          throw new Error("Failed pattern match at Thermite line 276, column 7 - line 280, column 76: " + [ $74.constructor.name ]);
                      };
                  };
              };
              return {
                  performAction: performAction, 
                  render: render
              };
          };
      };
  };
  var defaultPerformAction = function (v) {
      return function (v1) {
          return function (v2) {
              return Control_Applicative.pure(Control_Monad_Free_Trans.applicativeFreeT(Control_Coroutine.functorCoTransform)(Control_Monad_Aff.monadAff))(Data_Unit.unit);
          };
      };
  };
  var createReactSpec = function (v) {
      return function (state) {
          var dispatcher = function ($$this) {
              return function (action) {
                  return Data_Functor["void"](Control_Monad_Eff.functorEff)(function __do() {
                      var v1 = React.getProps($$this)();
                      var v2 = React.readState($$this)();
                      var put = function ($$new) {
                          return Control_Monad_Aff.makeAff(function (v3) {
                              return function (k) {
                                  return Control_Monad_Eff_Unsafe.unsafeCoerceEff(Data_Functor["void"](Control_Monad_Eff.functorEff)(React.writeStateWithCallback($$this)($$new)(Control_Monad_Eff_Unsafe.unsafeCoerceEff(k($$new)))));
                              };
                          });
                      };
                      var transformer = Control_Monad_Rec_Class.forever(Control_Monad_Free_Trans.monadRecFreeT(Control_Coroutine.functorTransform)(Control_Monad_Aff.monadAff))(Control_Monad_Free_Trans.freeT(function (v3) {
                          return Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(Control_Monad_Eff_Unsafe.unsafeCoerceEff(React.readState($$this))))(function (v4) {
                              return Control_Applicative.pure(Control_Monad_Aff.applicativeAff)(new Data_Either.Right(function (f) {
                                  var $$new = f(v4);
                                  return new Data_Tuple.Tuple(new Data_Maybe.Just($$new), Control_Monad_Trans_Class.lift(Control_Monad_Free_Trans.monadTransFreeT(Control_Coroutine.functorTransform))(Control_Monad_Aff.monadAff)(put($$new)));
                              }));
                          });
                      }));
                      var process = Control_Coroutine.fuseCoTransform(Control_Monad_Aff.monadRecAff)(Control_Monad_Aff.parallelParAff)(transformer)(v.performAction(action)(v1)(v2));
                      return Control_Monad_Eff_Unsafe.unsafeCoerceEff(Control_Monad_Aff.launchAff(Control_Coroutine.runProcess(Control_Monad_Aff.monadRecAff)(process)))();
                  });
              };
          };
          var render = function ($$this) {
              return Data_Functor.map(Control_Monad_Eff.functorEff)(React_DOM["div'"])(Control_Apply.apply(Control_Monad_Eff.applyEff)(Control_Apply.apply(Control_Monad_Eff.applyEff)(Data_Functor.map(Control_Monad_Eff.functorEff)(v.render(dispatcher($$this)))(React.getProps($$this)))(React.readState($$this)))(React.getChildren($$this)));
          };
          return {
              spec: React.spec(state)(render), 
              dispatcher: dispatcher
          };
      };
  };
  exports["createReactSpec"] = createReactSpec;
  exports["defaultPerformAction"] = defaultPerformAction;
  exports["focus"] = focus;
  exports["modifyState"] = modifyState;
  exports["simpleSpec"] = simpleSpec;
  exports["split"] = split;
  exports["writeState"] = writeState;
  exports["semigroupSpec"] = semigroupSpec;
  exports["monoidSpec"] = monoidSpec;
})(PS["Thermite"] = PS["Thermite"] || {});
(function(exports) {
    "use strict";
  var Prelude = PS["Prelude"];
  var React = PS["React"];
  var React_DOM = PS["React.DOM"];
  var React_DOM_Props = PS["React.DOM.Props"];
  var ReactDOM = PS["ReactDOM"];
  var Thermite = PS["Thermite"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Now = PS["Control.Monad.Eff.Now"];
  var Control_Monad_Eff_Timer = PS["Control.Monad.Eff.Timer"];
  var DOM = PS["DOM"];
  var DOM_HTML = PS["DOM.HTML"];
  var DOM_HTML_Types = PS["DOM.HTML.Types"];
  var DOM_HTML_Window = PS["DOM.HTML.Window"];
  var DOM_Node_ParentNode = PS["DOM.Node.ParentNode"];
  var Data_DateTime_Instant = PS["Data.DateTime.Instant"];
  var Data_Either = PS["Data.Either"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Int = PS["Data.Int"];
  var Data_Lens = PS["Data.Lens"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Nullable = PS["Data.Nullable"];
  var Data_String = PS["Data.String"];
  var Data_Time_Duration = PS["Data.Time.Duration"];
  var Data_Tuple = PS["Data.Tuple"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Data_Eq = PS["Data.Eq"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Show = PS["Data.Show"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Control_Monad_Free_Trans = PS["Control.Monad.Free.Trans"];
  var Control_Coroutine = PS["Control.Coroutine"];
  var Control_Monad_Aff = PS["Control.Monad.Aff"];
  var Data_Lens_Prism = PS["Data.Lens.Prism"];
  var Data_Lens_Lens = PS["Data.Lens.Lens"];
  var Data_Lens_Setter = PS["Data.Lens.Setter"];
  var Data_Profunctor_Strong = PS["Data.Profunctor.Strong"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Unit = PS["Data.Unit"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Data_Lens_Lens_Tuple = PS["Data.Lens.Lens.Tuple"];
  var Data_Lens_Prism_Either = PS["Data.Lens.Prism.Either"];
  var Data_Ring = PS["Data.Ring"];        
  var First = (function () {
      function First() {

      };
      First.value = new First();
      return First;
  })();
  var Back = (function () {
      function Back() {

      };
      Back.value = new Back();
      return Back;
  })();
  var Next = (function () {
      function Next() {

      };
      Next.value = new Next();
      return Next;
  })();
  var Last = (function () {
      function Last() {

      };
      Last.value = new Last();
      return Last;
  })();
  var Increment1 = (function () {
      function Increment1() {

      };
      Increment1.value = new Increment1();
      return Increment1;
  })();
  var Increment2 = (function () {
      function Increment2() {

      };
      Increment2.value = new Increment2();
      return Increment2;
  })();
  var Increment3 = (function () {
      function Increment3() {

      };
      Increment3.value = new Increment3();
      return Increment3;
  })();
  var Increment4 = (function () {
      function Increment4() {

      };
      Increment4.value = new Increment4();
      return Increment4;
  })();
  var timer = (function () {
      var render = function (v) {
          return function (v1) {
              return function (state) {
                  return function (v2) {
                      var ss = Data_Int.floor(Data_Newtype.unwrap(Data_Time_Duration.newtypeSeconds)(state));
                      var ss$prime = ss % 60;
                      var show2 = function (x) {
                          if (Data_String.length(Data_Show.show(Data_Show.showInt)(x)) < 2) {
                              return "0" + Data_Show.show(Data_Show.showInt)(x);
                          };
                          if (Data_Boolean.otherwise) {
                              return Data_Show.show(Data_Show.showInt)(x);
                          };
                          throw new Error("Failed pattern match at Main line 499, column 5 - line 508, column 37: " + [ x.constructor.name ]);
                      };
                      var mm = ss / 60 | 0;
                      return [ React_DOM.div([ React_DOM_Props.className("timer") ])([ React_DOM.text(show2(mm) + (":" + show2(ss$prime))) ]) ];
                  };
              };
          };
      };
      var performAction = function (dur) {
          return function (v) {
              return function (v1) {
                  return Data_Functor["void"](Control_Monad_Free_Trans.functorFreeT(Control_Coroutine.functorCoTransform)(Control_Monad_Aff.functorAff))(Thermite.writeState(dur));
              };
          };
      };
      return Thermite.simpleSpec(performAction)(render);
  })();
  var slideNumberIs = function (n) {
      return function (dictChoice) {
          return Data_Lens_Prism.prism(function (v) {
              return {
                  slideNumber: n, 
                  sharedState: v
              };
          })(function (v) {
              if (v.slideNumber === n) {
                  return new Data_Either.Right(v.sharedState);
              };
              if (Data_Boolean.otherwise) {
                  return new Data_Either.Left(v);
              };
              throw new Error("Failed pattern match at Main line 62, column 3 - line 66, column 30: " + [ v.constructor.name ]);
          })(dictChoice);
      };
  };
  var slideNumber = function (dictStrong) {
      return Data_Lens_Lens.lens(function (v) {
          return v.slideNumber;
      })(function (v) {
          return function (v1) {
              var $102 = {};
              for (var $103 in v) {
                  if (v.hasOwnProperty($103)) {
                      $102[$103] = v[$103];
                  };
              };
              $102.slideNumber = v1;
              return $102;
          };
      })(dictStrong);
  };
  var slide8 = Thermite.simpleSpec(Thermite.defaultPerformAction)(function (dispatch) {
      return function (v) {
          return function (state) {
              return function (v1) {
                  return [ React_DOM["h1'"]([ React_DOM.text("Two Counters") ]), React_DOM["p'"]([ React_DOM.text("State:") ]), React_DOM["pre'"]([ React_DOM["code'"]([ React_DOM.text("Tuple CounterState CounterState") ]) ]), React_DOM["p'"]([ React_DOM.text("Actions:") ]), React_DOM["pre'"]([ React_DOM["code'"]([ React_DOM.text("Either CounterAction CounterAction") ]) ]), React_DOM["p'"]([ React_DOM.text("We can talk about the parts using lenses and prisms") ]) ];
              };
          };
      };
  });
  var slide6 = Thermite.simpleSpec(Thermite.defaultPerformAction)(function (dispatch) {
      return function (v) {
          return function (state) {
              return function (v1) {
                  return [ React_DOM["h1'"]([ React_DOM.text("Composition in Thermite") ]), React_DOM["p'"]([ React_DOM.text("Preview:") ]), React_DOM["ul'"]([ React_DOM["li'"]([ React_DOM.text("State: record types") ]), React_DOM["li'"]([ React_DOM.text("Action: sum types") ]), React_DOM["li'"]([ React_DOM.text("Render/Update: lenses and prisms") ]) ]), React_DOM["p'"]([ React_DOM.text("These slides are composed from several small components") ]), React_DOM["p'"]([ React_DOM.text("(check the source!)") ]) ];
              };
          };
      };
  });
  var slide5 = Thermite.simpleSpec(Thermite.defaultPerformAction)(function (dispatch) {
      return function (v) {
          return function (state) {
              return function (v1) {
                  return [ React_DOM["h1'"]([ React_DOM.text("Component Composition \ud83d\ude15") ]), React_DOM["p'"]([ React_DOM.text("How should we compose these components?") ]), React_DOM["ul'"]([ React_DOM["li'"]([ React_DOM.text("State: record types") ]), React_DOM["li'"]([ React_DOM.text("Action: sum types") ]), React_DOM["li'"]([ React_DOM.text("Render: projection") ]), React_DOM["li'"]([ React_DOM.text("Update: pattern matching") ]) ]), React_DOM["p'"]([ React_DOM.text("(i.e. lots of repetition/recipes)") ]) ];
              };
          };
      };
  });

  /**
 *  slide2 :: forall eff props. T.Spec eff SharedState props SlidesAction
 *  slide2 = T.simpleSpec T.defaultPerformAction \dispatch _ state _ ->
 *    [ RD.h1' [ RD.text "Problems for UI Libraries" ]
 *    , RD.p'  [ RD.text "UI libraries have to solve the following problems:" ]
 *    , RD.ul' [ RD.li' [ RD.text "Multiple components" ]
 *             , RD.li' [ RD.text "3rd party components" ]
 *             , RD.li' [ RD.text "Async code (AJAX etc.)" ]
 *             ]
 *    , RD.p'  [ RD.text "Thermite uses PureScript's advanced type system features to solve these problems:" ]
 *    , RD.ul' [ RD.li' [ RD.text "Lenses" ]
 *             , RD.li' [ RD.text "Coroutines" ]
 *             ]
 *    ]
 */  
  var slide3 = Thermite.simpleSpec(Thermite.defaultPerformAction)(function (dispatch) {
      return function (v) {
          return function (state) {
              return function (v1) {
                  return [ React_DOM["h1'"]([ React_DOM.text("The Elm Architecture (TEA) \ud83d\ude0e") ]), React_DOM["p'"]([ React_DOM.text("Components are defined by:") ]), React_DOM["ul'"]([ React_DOM["li'"]([ React_DOM.text("A state/model type") ]), React_DOM["li'"]([ React_DOM.text("An action/message type") ]), React_DOM["li'"]([ React_DOM.text("A render/view function") ]), React_DOM["li'"]([ React_DOM.text("An update function") ]) ]), React_DOM["p'"]([ React_DOM.text("Thermite was originally a port of TEA to PureScript/React") ]), React_DOM["p'"]([ React_DOM.text("Now see "), React_DOM["code'"]([ React_DOM.text("purescript-pux") ]) ]) ];
              };
          };
      };
  });
  var slide2 = Thermite.simpleSpec(Thermite.defaultPerformAction)(function (dispatch) {
      return function (v) {
          return function (state) {
              return function (v1) {
                  return [ React_DOM["h1'"]([ React_DOM.text("This Talk") ]), React_DOM["ul'"]([ React_DOM["li'"]([ React_DOM.text("History of the API") ]), React_DOM["li'"]([ React_DOM.text("Techniques discovered") ]), React_DOM["li'"]([ React_DOM.text("Examples") ]) ]) ];
              };
          };
      };
  });
  var slide1 = Thermite.simpleSpec(Thermite.defaultPerformAction)(function (dispatch) {
      return function (v) {
          return function (state) {
              return function (v1) {
                  return [ React_DOM["h1'"]([ React_DOM.text("Intro") ]), React_DOM["p'"]([ React_DOM.text("Thermite is a") ]), React_DOM["ul'"]([ React_DOM["li'"]([ React_DOM.text("small (~200 LOC)") ]), React_DOM["li'"]([ React_DOM.text("stable (v1.0!) \ud83d\ude00") ]), React_DOM["li'"]([ React_DOM.text("React-based") ]) ]), React_DOM["p'"]([ React_DOM.text("UI library for PureScript") ]), React_DOM["p'"]([ React_DOM.text("inspired by Elm, react-blaze and OpticUI") ]) ];
              };
          };
      };
  });
  var slide0 = Thermite.simpleSpec(Thermite.defaultPerformAction)(function (dispatch) {
      return function (v) {
          return function (state) {
              return function (v1) {
                  return [ React_DOM.h1([ React_DOM_Props.className("center") ])([ React_DOM.text("Front End Development with PureScript and Thermite") ]), React_DOM.p([ React_DOM_Props.className("center") ])([ React_DOM.text("Phil Freeman") ]), React_DOM.p([ React_DOM_Props.className("center") ])([ React_DOM["code'"]([ React_DOM.text("paf31/codemesh2016") ]) ]) ];
              };
          };
      };
  });
  var sharedState = function (dictStrong) {
      return Data_Lens_Lens.lens(function (v) {
          return v.sharedState;
      })(function (v) {
          return function (v1) {
              var $119 = {};
              for (var $120 in v) {
                  if (v.hasOwnProperty($120)) {
                      $119[$120] = v[$120];
                  };
              };
              $119.sharedState = v1;
              return $119;
          };
      })(dictStrong);
  };
  var next = Data_Lens_Setter.over(slideNumber(Data_Profunctor_Strong.strongFn))(function ($162) {
      return (function (v) {
          return v % 21;
      })(1 + $162 | 0);
  });
  var last = Data_Lens_Setter.set(slideNumber(Data_Profunctor_Strong.strongFn))(20);
  var initialState = {
      slideNumber: 0, 
      sharedState: {
          counter1: 0, 
          counter2: 0, 
          counter3: 0, 
          counter4: 0
      }
  };
  var first = Data_Lens_Setter.set(slideNumber(Data_Profunctor_Strong.strongFn))(0);
  var eqSlidesAction = new Data_Eq.Eq(function (x) {
      return function (y) {
          if (x instanceof First && y instanceof First) {
              return true;
          };
          if (x instanceof Back && y instanceof Back) {
              return true;
          };
          if (x instanceof Next && y instanceof Next) {
              return true;
          };
          if (x instanceof Last && y instanceof Last) {
              return true;
          };
          if (x instanceof Increment1 && y instanceof Increment1) {
              return true;
          };
          if (x instanceof Increment2 && y instanceof Increment2) {
              return true;
          };
          if (x instanceof Increment3 && y instanceof Increment3) {
              return true;
          };
          if (x instanceof Increment4 && y instanceof Increment4) {
              return true;
          };
          return false;
      };
  });
  var increment1 = function (dictChoice) {
      return Data_Lens_Prism.only(eqSlidesAction)(Increment1.value)(dictChoice);
  };
  var increment2 = function (dictChoice) {
      return Data_Lens_Prism.only(eqSlidesAction)(Increment2.value)(dictChoice);
  };
  var increment3 = function (dictChoice) {
      return Data_Lens_Prism.only(eqSlidesAction)(Increment3.value)(dictChoice);
  };
  var increment4 = function (dictChoice) {
      return Data_Lens_Prism.only(eqSlidesAction)(Increment4.value)(dictChoice);
  };
  var counter4 = function (dictStrong) {
      return Data_Lens_Lens.lens(function (v) {
          return v.counter4;
      })(function (v) {
          return function (v1) {
              var $124 = {};
              for (var $125 in v) {
                  if (v.hasOwnProperty($125)) {
                      $124[$125] = v[$125];
                  };
              };
              $124.counter4 = v1;
              return $124;
          };
      })(dictStrong);
  };
  var counter3 = function (dictStrong) {
      return Data_Lens_Lens.lens(function (v) {
          return v.counter3;
      })(function (v) {
          return function (v1) {
              var $127 = {};
              for (var $128 in v) {
                  if (v.hasOwnProperty($128)) {
                      $127[$128] = v[$128];
                  };
              };
              $127.counter3 = v1;
              return $127;
          };
      })(dictStrong);
  };
  var counter2 = function (dictStrong) {
      return Data_Lens_Lens.lens(function (v) {
          return v.counter2;
      })(function (v) {
          return function (v1) {
              var $130 = {};
              for (var $131 in v) {
                  if (v.hasOwnProperty($131)) {
                      $130[$131] = v[$131];
                  };
              };
              $130.counter2 = v1;
              return $130;
          };
      })(dictStrong);
  };
  var counter1 = function (dictStrong) {
      return Data_Lens_Lens.lens(function (v) {
          return v.counter1;
      })(function (v) {
          return function (v1) {
              var $133 = {};
              for (var $134 in v) {
                  if (v.hasOwnProperty($134)) {
                      $133[$134] = v[$134];
                  };
              };
              $133.counter1 = v1;
              return $133;
          };
      })(dictStrong);
  };
  var counter = (function () {
      var render = function (dispatch) {
          return function (v) {
              return function (state) {
                  return function (v1) {
                      return [ React_DOM["p'"]([ React_DOM.button([ React_DOM_Props.onClick(function (v2) {
                          return dispatch(Data_Unit.unit);
                      }) ])([ React_DOM.text(Data_Show.show(Data_Show.showInt)(state)) ]) ]) ];
                  };
              };
          };
      };
      var performAction = function (v) {
          return function (v1) {
              return function (v2) {
                  return Data_Functor["void"](Control_Monad_Free_Trans.functorFreeT(Control_Coroutine.functorCoTransform)(Control_Monad_Aff.functorAff))(Thermite.modifyState(Data_Semiring.add(Data_Semiring.semiringInt)(1)));
              };
          };
      };
      return Thermite.simpleSpec(performAction)(render);
  })();
  var slide4 = (function () {
      var example = Data_String.joinWith("\n")([ "type CounterState = Int", "data CounterAction = Increment", "", "counter = T.simpleSpec performAction render where", "  render dispatch _ count _ =", "    [ button [ onClick \\_ \u2192 dispatch Increment ]", "             [ text (show count) ]", "    ]", "", "  performAction Increment _ _ = void $ modifyState (add 1)" ]);
      var intro = Thermite.simpleSpec(Thermite.defaultPerformAction)(function (dispatch) {
          return function (v) {
              return function (state) {
                  return function (v1) {
                      return [ React_DOM["h1'"]([ React_DOM.text("Counter Component") ]), React_DOM["pre'"]([ React_DOM["code'"]([ React_DOM.text(example) ]) ]) ];
                  };
              };
          };
      });
      return Data_Semigroup.append(Thermite.semigroupSpec)(intro)(Thermite.focus(function (dictStrong) {
          return counter1(dictStrong);
      })(function (dictChoice) {
          return increment1(dictChoice);
      })(counter));
  })();
  var slide7 = (function () {
      var outro = Thermite.simpleSpec(Thermite.defaultPerformAction)(function (dispatch) {
          return function (v) {
              return function (state) {
                  return function (v1) {
                      return [ React_DOM["p'"]([ React_DOM.text("... but perhaps not the one you were thinking of") ]), React_DOM["p'"]([ React_DOM.text("We need a way to break up the state") ]) ];
                  };
              };
          };
      });
      var intro = Thermite.simpleSpec(Thermite.defaultPerformAction)(function (dispatch) {
          return function (v) {
              return function (state) {
                  return function (v1) {
                      return [ React_DOM["h1'"]([ React_DOM.text("Monoidal composition") ]), React_DOM["p'"]([ React_DOM.text("The Monoid instance gives us one type of composition:") ]), React_DOM["pre'"]([ React_DOM["code'"]([ React_DOM.text("twoCounters = counter <> counter") ]) ]) ];
                  };
              };
          };
      });
      var counters = Data_Semigroup.append(Thermite.semigroupSpec)(Thermite.focus(function (dictStrong) {
          return counter2(dictStrong);
      })(function (dictChoice) {
          return increment2(dictChoice);
      })(counter))(Thermite.focus(function (dictStrong) {
          return counter2(dictStrong);
      })(function (dictChoice) {
          return increment2(dictChoice);
      })(counter));
      return Data_Semigroup.append(Thermite.semigroupSpec)(intro)(Data_Semigroup.append(Thermite.semigroupSpec)(counters)(outro));
  })();
  var slide9 = (function () {
      var example = Data_String.joinWith("\n")([ "_1     :: Lens' (Tuple a b) a", "_2     :: Lens' (Tuple a b) b", "_Left  :: Prism' (Either a b) a", "_Right :: Prism' (Either a b) b" ]);
      var intro = Thermite.simpleSpec(Thermite.defaultPerformAction)(function (dispatch) {
          return function (v) {
              return function (state) {
                  return function (v1) {
                      return [ React_DOM["h1'"]([ React_DOM.text("Focusing") ]), React_DOM["p'"]([ React_DOM.text("Instead, we use a Lens to focus on a smaller part of the state, and a Prism to match a subset of the actions.") ]), React_DOM["pre'"]([ React_DOM["code'"]([ React_DOM.text(example) ]) ]), React_DOM["p'"]([ React_DOM.text("Our component becomes:") ]), React_DOM["pre'"]([ React_DOM["code'"]([ React_DOM.text("focus _1 _Left counter <> focus _2 _Right counter") ]) ]) ];
                  };
              };
          };
      });
      var counters = Data_Semigroup.append(Thermite.semigroupSpec)(Thermite.focus(function (dictStrong) {
          return counter3(dictStrong);
      })(function (dictChoice) {
          return increment3(dictChoice);
      })(counter))(Thermite.focus(function (dictStrong) {
          return counter4(dictStrong);
      })(function (dictChoice) {
          return increment4(dictChoice);
      })(counter));
      return Data_Semigroup.append(Thermite.semigroupSpec)(intro)(counters);
  })();

  /**
 *  slide10 :: forall eff props. T.Spec eff SharedState props SlidesAction
 *  slide10 = T.simpleSpec T.defaultPerformAction \dispatch _ state _ ->
 *      [ RD.h1'  [ RD.text "Tab Components" ]
 *      , RD.p'   [ RD.text "Lenses let us identify smaller parts of a product of types, which is a good model for independent components." ]
 *      , RD.p'   [ RD.text "Prisms let us identify smaller parts of a sum of types, which is a good model for tabbed applications:" ]
 *      , RD.pre' [ RD.code' [ RD.text example ] ]
 *      , RD.p'   [ RD.text "Note that" ]
 *      , RD.ul' [ RD.li' [ RD.text "The action type δ does not change here" ]
 *               , RD.li' [ RD.text "No information is shared between tabs" ]
 *               ]
 *      ]
 *    where
 *      example = """split
 *    ∷ ∀ eff σ₁ σ₂ δ
 *    . PrismP σ₁ σ₂
 *    → Spec eff σ₂ δ
 *    → Spec eff σ₁ δ"""
 * 
 *  slide11 :: forall eff props. T.Spec eff SharedState props SlidesAction
 *  slide11 = T.simpleSpec T.defaultPerformAction \dispatch _ state _ ->
 *      [ RD.h1'  [ RD.text "List Components" ]
 *      , RD.p'   [ RD.text "The last type of composition lets us define lists of subcomponents:" ]
 *      , RD.pre' [ RD.code' [ RD.text example ] ]
 *      , RD.p'   [ RD.text "In OpticUI, this is generalized to a Traversal." ]
 *      , RD.p'   [ RD.text "Note that" ]
 *      , RD.ul'  [ RD.li' [ RD.text "We have a whole list of states, one for each list element" ]
 *                , RD.li' [ RD.text "The action type now includes the index of the component to update" ]
 *                ]
 *      ]
 *    where
 *      example = """foreach
 *    ∷ ∀ eff σ δ
 *    . (Int -> Spec eff σ δ)
 *    → Spec eff (List σ) (Tuple Int δ)"""
 * 
 *  slide12 :: forall eff props. T.Spec eff SharedState props SlidesAction
 *  slide12 = T.simpleSpec T.defaultPerformAction \dispatch _ state _ ->
 *    [ RD.h1' [ RD.text "Summary" ]
 *    , RD.table' [ RD.thead' [ RD.th' [ RD.text "Component" ]
 *                             , RD.th' [ RD.text "Function" ]
 *                             , RD.th' [ RD.text "Optic" ]
 *                             ]
 *                 , RD.tbody' [ RD.tr' [ RD.td' [ RD.text "Pair (same state)" ]
 *                                      , RD.td' [ RD.pre' [ RD.code' [ RD.text "(<>)" ] ] ]
 *                                      , RD.td' [ RD.text "" ]
 *                                      ]
 *                             , RD.tr' [ RD.td' [ RD.text "Pair (independent)" ]
 *                                      , RD.td' [ RD.pre' [ RD.code' [ RD.text "focus" ] ] ]
 *                                      , RD.td' [ RD.text "Lens" ]
 *                                      ]
 *                             , RD.tr' [ RD.td' [ RD.text "Tabs" ]
 *                                      , RD.td' [ RD.pre' [ RD.code' [ RD.text "split" ] ] ]
 *                                      , RD.td' [ RD.text "Prism" ]
 *                                      ]
 *                             , RD.tr' [ RD.td' [ RD.text "Lists" ]
 *                                      , RD.td' [ RD.pre' [ RD.code' [ RD.text "foreach" ] ] ]
 *                                      , RD.td' [ RD.text "Traversal" ]
 *                                      ]
 *                             ]
 *                 ]
 *    ]
 * 
 *  slide13 :: forall eff props. T.Spec eff SharedState props SlidesAction
 *  slide13 = T.simpleSpec T.defaultPerformAction \dispatch _ state _ ->
 *    [ RD.h1' [ RD.text "Task List Example" ]
 *    , RD.p'  [ RD.text "Putting it all together" ]
 *    , RD.p'  [ RD.a [ RP.href "http://functorial.com/purescript-thermite-todomvc/"
 *                     , RP.target "_blank"
 *                     ]
 *                     [ RD.text "Demo" ]
 *              ]
 *    , RD.p'  [ RD.a [ RP.href "https://github.com/paf31/purescript-thermite/blob/master/test"
 *                     , RP.target "_blank"
 *                     ]
 *                     [ RD.text "Code" ]
 *              ]
 *    ]
 * 
 *  slide14 :: forall eff props. T.Spec eff SharedState props SlidesAction
 *  slide14 = T.simpleSpec T.defaultPerformAction \dispatch _ state _ ->
 *    [ RD.h1' [ RD.text "Async" ]
 *    , RD.p'  [ RD.text "Or \"What's this cotransform thing about?\"" ]
 *    ]
 * 
 *  slide15 :: forall eff props. T.Spec eff SharedState props SlidesAction
 *  slide15 = T.simpleSpec T.defaultPerformAction \dispatch _ state _ ->
 *    [ RD.h1' [ RD.text "Coroutines" ]
 *    , RD.p'  [ RD.text "The purescript-coroutines library defines the Coroutine abstraction, which generalizes" ]
 *    , RD.ul'  [ RD.li' [ RD.text "Data producers" ]
 *               , RD.li' [ RD.text "Data consumers" ]
 *               , RD.li' [ RD.text "Data transformers" ]
 *               ]
 *    , RD.p'  [ RD.text "over some base monad (usually Aff)" ]
 *    , RD.p'  [ RD.text "This is a good model for various asynchronous processes:" ]
 *    , RD.ul'  [ RD.li' [ RD.text "AJAX" ]
 *               , RD.li' [ RD.text "Websockets" ]
 *               , RD.li' [ RD.text "Node streams" ]
 *               ]
 *    ]
 * 
 *  slide16 :: forall eff props. T.Spec eff SharedState props SlidesAction
 *  slide16 = T.simpleSpec T.defaultPerformAction \dispatch _ state _ ->
 *      [ RD.h1' [ RD.text "Producers and Consumers" ]
 *      , RD.p'  [ RD.text "Coroutines are free monad transformers" ]
 *      , RD.pre' [ RD.code' [ RD.text example ] ]
 *      ]
 *    where
 *      example = """type Co f m = FreeT f m
 * 
 *  data Emit o a = Emit o a
 *  type Producer o = Co (Emit o)
 * 
 *  newtype Await i a = Await (i -> a)
 *  type Consumer i = Co (Await i)"""
 * 
 *  slide17 :: forall eff props. T.Spec eff SharedState props SlidesAction
 *  slide17 = T.simpleSpec T.defaultPerformAction \dispatch _ state _ ->
 *      [ RD.h1' [ RD.text "Transformers" ]
 *      , RD.p'  [ RD.text "Transformers take one input and return one output" ]
 *      , RD.pre' [ RD.code' [ RD.text example ] ]
 *      ]
 *    where
 *      example = """newtype Transform i o a = Transform (i -> Tuple o a)
 *  type Transformer i o = Co (Transform i o)
 * 
 *  data CoTransform i o a = CoTransform o (i -> a)
 *  type CoTransformer i o = Co (CoTransform i o)
 * 
 *  cotransform
 *    ∷ ∀ m i o
 *    . Monad m
 *    ⇒ o
 *    → CoTransformer i o m i"""
 * 
 *  slide18 :: forall eff props. T.Spec eff SharedState props SlidesAction
 *  slide18 = T.simpleSpec T.defaultPerformAction \dispatch _ state _ ->
 *    [ RD.h1'  [ RD.text "React as a Transformer" ]
 *    , RD.p'   [ RD.text "React yields the current state and waits for state update (asynchronously!)" ]
 *    , RD.pre' [ RD.code' [ RD.text "react :: CoTransformer (σ -> σ) (Maybe σ) (Aff eff) Unit" ] ]
 *    , RD.p'   [ RD.text "We can fuse this with our update coroutine:" ]
 *    , RD.pre' [ RD.code' [ RD.text "CoTransformer (Maybe σ) (σ → σ) (Aff eff) Unit" ] ]
 *    ]
 * 
 *  slide19 :: forall eff props. T.Spec eff SharedState props SlidesAction
 *  slide19 = T.simpleSpec T.defaultPerformAction \dispatch _ state _ ->
 *    [ RD.h1' [ RD.text "Try Thermite" ]
 *    , RD.p'  [ RD.text "Try Thermite in the browser and see results immediately:" ]
 *    , RD.p'  [ RD.a [ RP.href "http://paf31.github.io/try-thermite/"
 *                    , RP.target "_blank"
 *                    ]
 *                    [ RD.text "Try it now" ]
 *             ]
 *    ]
 * 
 *  slide20 :: forall eff props. T.Spec eff SharedState props SlidesAction
 *  slide20 = T.simpleSpec T.defaultPerformAction \dispatch _ state _ ->
 *    [ RD.h1' [ RD.text "Questions?" ] ]
 */  
  var slidesComponent = (function () {
      var slide = function (n) {
          return Thermite.split(function (dictChoice) {
              return slideNumberIs(n)(dictChoice);
          });
      };
      return Data_Foldable.fold(Data_Foldable.foldableArray)(Thermite.monoidSpec)([ slide(0)(slide0), slide(1)(slide1), slide(2)(slide2), slide(3)(slide3), slide(4)(slide4), slide(5)(slide5), slide(6)(slide6), slide(7)(slide7), slide(8)(slide8), slide(9)(slide9) ]);
  })();
  var back = Data_Lens_Setter.over(slideNumber(Data_Profunctor_Strong.strongFn))(function ($163) {
      return (function (v) {
          return v % 21;
      })(20 + $163 | 0);
  });
  var navbar = (function () {
      var render = function (dispatch) {
          return function (v) {
              return function (v1) {
                  return function (v2) {
                      return [ React_DOM["nav'"]([ React_DOM.a([ React_DOM_Props.href("#"), React_DOM_Props.onClick(function (v3) {
                          return dispatch(First.value);
                      }) ])([ React_DOM.text("\u21e6") ]), React_DOM.a([ React_DOM_Props.href("#"), React_DOM_Props.onClick(function (v3) {
                          return dispatch(Back.value);
                      }) ])([ React_DOM.text("\u2190") ]), React_DOM.a([ React_DOM_Props.href("#"), React_DOM_Props.onClick(function (v3) {
                          return dispatch(Next.value);
                      }) ])([ React_DOM.text("\u2192") ]), React_DOM.a([ React_DOM_Props.href("#"), React_DOM_Props.onClick(function (v3) {
                          return dispatch(Last.value);
                      }) ])([ React_DOM.text("\u21e8") ]) ]) ];
                  };
              };
          };
      };
      var performAction = function (v) {
          return function (v1) {
              return function (v2) {
                  if (v instanceof First) {
                      return Data_Functor["void"](Control_Monad_Free_Trans.functorFreeT(Control_Coroutine.functorCoTransform)(Control_Monad_Aff.functorAff))(Thermite.modifyState(first));
                  };
                  if (v instanceof Back) {
                      return Data_Functor["void"](Control_Monad_Free_Trans.functorFreeT(Control_Coroutine.functorCoTransform)(Control_Monad_Aff.functorAff))(Thermite.modifyState(back));
                  };
                  if (v instanceof Next) {
                      return Data_Functor["void"](Control_Monad_Free_Trans.functorFreeT(Control_Coroutine.functorCoTransform)(Control_Monad_Aff.functorAff))(Thermite.modifyState(next));
                  };
                  if (v instanceof Last) {
                      return Data_Functor["void"](Control_Monad_Free_Trans.functorFreeT(Control_Coroutine.functorCoTransform)(Control_Monad_Aff.functorAff))(Thermite.modifyState(last));
                  };
                  return Control_Applicative.pure(Control_Monad_Free_Trans.applicativeFreeT(Control_Coroutine.functorCoTransform)(Control_Monad_Aff.monadAff))(Data_Unit.unit);
              };
          };
      };
      return Thermite.simpleSpec(performAction)(render);
  })();
  var main = function __do() {
      var v = Control_Monad_Eff_Now.now();
      var mainComponent = Data_Semigroup.append(Thermite.semigroupSpec)(Thermite.focus(function (dictStrong) {
          return Data_Lens_Lens_Tuple._1(dictStrong);
      })(function (dictChoice) {
          return Data_Lens_Prism_Either._Left(dictChoice);
      })(Data_Semigroup.append(Thermite.semigroupSpec)(navbar)(slidesComponent)))(Thermite.focus(function (dictStrong) {
          return Data_Lens_Lens_Tuple._2(dictStrong);
      })(function (dictChoice) {
          return Data_Lens_Prism_Either._Right(dictChoice);
      })(timer));
      var $153 = Thermite.createReactSpec(mainComponent)(new Data_Tuple.Tuple(initialState, Data_Newtype.wrap(Data_Time_Duration.newtypeSeconds)(0.0)));
      return Data_Functor["void"](Control_Monad_Eff.functorEff)((function () {
          var tick = function ($$this) {
              return function __do() {
                  var v1 = Control_Monad_Eff_Now.now();
                  var dur = Data_Time_Duration.convertDuration(Data_Time_Duration.durationMilliseconds)(Data_Time_Duration.durationSeconds)(Data_Ring.sub(Data_Time_Duration.ringMilliseconds)(Data_DateTime_Instant.unInstant(v1))(Data_DateTime_Instant.unInstant(v)));
                  return $153.dispatcher($$this)(new Data_Either.Right(dur))();
              };
          };
          var setupTimer = function ($$this) {
              return Data_Functor["void"](Control_Monad_Eff.functorEff)(Control_Monad_Eff_Timer.setInterval(1000)(tick($$this)));
          };
          var spec$prime = (function () {
              var $155 = {};
              for (var $156 in $153.spec) {
                  if ($153.spec.hasOwnProperty($156)) {
                      $155[$156] = $153.spec[$156];
                  };
              };
              $155.componentWillMount = setupTimer;
              return $155;
          })();
          return function __do() {
              var v1 = Control_Bind.bind(Control_Monad_Eff.bindEff)(DOM_HTML.window)(DOM_HTML_Window.document)();
              var v2 = Partial_Unsafe.unsafePartial(function (dictPartial) {
                  return Data_Functor.map(Control_Monad_Eff.functorEff)(function ($164) {
                      return Data_Maybe.fromJust(dictPartial)(Data_Nullable.toMaybe($164));
                  })(DOM_Node_ParentNode.querySelector("#container")(DOM_HTML_Types.htmlDocumentToParentNode(v1)));
              })();
              return ReactDOM.render(React.createFactory(React.createClass(spec$prime))({}))(v2)();
          };
      })())();
  };
  exports["main"] = main;
})(PS["Main"] = PS["Main"] || {});
PS["Main"].main();
